{"repo":"log4cj","file":"logConfig.cj","path":"log4cj/src/logfile/logConfig.cj","code_tokens":"static public func getConfigInfo ( ) {  InfoModule . configInfo NL }","func_name":"getConfigInfo","docstring":""}
{"repo":"log4cj","file":"logfile.cj","path":"log4cj/src/logfile/logfile.cj","code_tokens":"public func getFileName ( ) {  ${configInfo.path}${configInfo.name} NL }","func_name":"getFileName","docstring":""}
{"repo":"log4cj","file":"logfile.cj","path":"log4cj/src/logfile/logfile.cj","code_tokens":"private func getTxtStream ( text : String ) {   let utf8V = text . utf8View NL  let txtStream = utf8V . toArray ( ) NL return txtStream NL }","func_name":"getTxtStream","docstring":""}
{"repo":"log4cj","file":"logfile.cj","path":"log4cj/src/logfile/logfile.cj","code_tokens":"public func setContent ( text : String ) {  this . content = text NL }","func_name":"setContent","docstring":""}
{"repo":"log4cj","file":"logfile.cj","path":"log4cj/src/logfile/logfile.cj","code_tokens":"public func writeLogFile ( ) {   let pathname : String = this . getFileName ( ) NL  let isExist = File . exists ( pathname ) NL  var fs : File = File ( pathname , OpenOption . CreateOrAppend ) NL if ( fs . canWrite ( ) ) {   var newText : String = content NL if ( isExist ) {  newText = ${lineBreak}${newText} NL } NL  let ts = this . getTxtStream ( newText ) NL fs . write ( ts ) NL fs . flush ( ) NL fs . close ( ) NL } NL fs . close ( ) NL }","func_name":"writeLogFile","docstring":""}
{"repo":"log4cj","file":"log.cj","path":"log4cj/src/logfile/log.cj","code_tokens":"public func getLevel ( ) {  this . configInfo . level NL }","func_name":"getLevel","docstring":""}
{"repo":"log4cj","file":"log.cj","path":"log4cj/src/logfile/log.cj","code_tokens":"public func getFileContent ( log : String ) {   var logTime = DateFormat . currentTime ( ) NL  var logDay = DateFormat . currentTime ( format : yyyy-MM-dd ) NL  var logLevel : String NL match ( this . getLevel ( ) ) { case OFF => logLevel = OFF NL case FATAL => logLevel = FATAL NL case ERROR => logLevel = ERROR NL case WARN => logLevel = WARN NL case INFO => logLevel = INFO NL case DEBUG => logLevel = DEBUG NL case TRACE => logLevel = TRACE NL case ALL => logLevel = ALL NL } NL this . configInfo . content = log NL  var content = [${logLevel}] [${logTime}]:  ${log} NL  let logInfo = LogInfo ( logDay , content ) NL return logInfo NL }","func_name":"getFileContent","docstring":""}
{"repo":"log4cj","file":"log.cj","path":"log4cj/src/logfile/log.cj","code_tokens":"public func getFileContent ( ) {   var logTime = DateFormat . currentTime ( ) NL  var logDay = DateFormat . currentTime ( format : yyyy-MM-dd ) NL  var logLevel : String NL match ( this . getLevel ( ) ) { case OFF => logLevel = OFF NL case FATAL => logLevel = FATAL NL case ERROR => logLevel = ERROR NL case WARN => logLevel = WARN NL case INFO => logLevel = INFO NL case DEBUG => logLevel = DEBUG NL case TRACE => logLevel = TRACE NL case ALL => logLevel = ALL NL } NL  var content = [${logLevel}] [${logTime}]:  ${this.configInfo.content} NL  let logInfo = LogInfo ( logDay , content ) NL return logInfo NL }","func_name":"getFileContent","docstring":""}
{"repo":"log4cj","file":"log.cj","path":"log4cj/src/logfile/log.cj","code_tokens":"public func getCustomFileContent ( lv : String , str : String ) {   var logTime = DateFormat . currentTime ( ) NL  var logDay = DateFormat . currentTime ( format : yyyy-MM-dd ) NL  let content : String NL  let strNull : Bool = str . isEmpty ( ) NL if ( strNull ) {  content = [${lv}] [${logTime}]:  ${this.configInfo.content} NL } else {  content = [${lv}] [${logTime}]:  ${str} NL } NL  let logInfo = LogInfo ( logDay , content ) NL return logInfo NL }","func_name":"getCustomFileContent","docstring":""}
{"repo":"log4cj","file":"log.cj","path":"log4cj/src/logfile/log.cj","code_tokens":"public func log ( str : String ) {   let info = this . getFileContent ( str ) NL println ( info . logContent ) NL writeLogF ( info ) NL }","func_name":"log","docstring":""}
{"repo":"log4cj","file":"log.cj","path":"log4cj/src/logfile/log.cj","code_tokens":"public func log ( ) {   let info = this . getFileContent ( ) NL println ( info . logContent ) NL writeLogF ( info ) NL }","func_name":"log","docstring":""}
{"repo":"log4cj","file":"log.cj","path":"log4cj/src/logfile/log.cj","code_tokens":"public func off ( str ! : String =  ) {   let info = this . getCustomFileContent ( OFF , str ) NL println ( info . logContent ) NL writeLogF ( info ) NL }","func_name":"off","docstring":"/**\n    * 不同日志等级对应的日志颜色\n    * \n    */"}
{"repo":"log4cj","file":"log.cj","path":"log4cj/src/logfile/log.cj","code_tokens":"public func fatal ( str ! : String =  ) {   let info = this . getCustomFileContent ( FATAL , str ) NL println ( info . logContent ) NL writeLogF ( info ) NL }","func_name":"fatal","docstring":""}
{"repo":"log4cj","file":"log.cj","path":"log4cj/src/logfile/log.cj","code_tokens":"public func error ( str ! : String =  ) {   let info = this . getCustomFileContent ( ERROR , str ) NL println ( info . logContent ) NL writeLogF ( info ) NL }","func_name":"error","docstring":""}
{"repo":"log4cj","file":"log.cj","path":"log4cj/src/logfile/log.cj","code_tokens":"public func warn ( str ! : String =  ) {   let info = this . getCustomFileContent ( WARN , str ) NL println ( info . logContent ) NL writeLogF ( info ) NL }","func_name":"warn","docstring":""}
{"repo":"log4cj","file":"log.cj","path":"log4cj/src/logfile/log.cj","code_tokens":"public func info ( str ! : String =  ) {   let info = this . getCustomFileContent ( INFO , str ) NL println ( info . logContent ) NL writeLogF ( info ) NL }","func_name":"info","docstring":""}
{"repo":"log4cj","file":"log.cj","path":"log4cj/src/logfile/log.cj","code_tokens":"public func debug ( str ! : String =  ) {   let info = this . getCustomFileContent ( DEBUG , str ) NL println ( info . logContent ) NL writeLogF ( info ) NL }","func_name":"debug","docstring":""}
{"repo":"log4cj","file":"log.cj","path":"log4cj/src/logfile/log.cj","code_tokens":"public func trace ( str ! : String =  ) {   let info = this . getCustomFileContent ( TRACE , str ) NL println ( info . logContent ) NL writeLogF ( info ) NL }","func_name":"trace","docstring":""}
{"repo":"log4cj","file":"log.cj","path":"log4cj/src/logfile/log.cj","code_tokens":"public func all ( str ! : String =  ) {   let info = this . getCustomFileContent ( ALL , str ) NL println ( info . logContent ) NL writeLogF ( info ) NL }","func_name":"all","docstring":""}
{"repo":"log4cj","file":"log.cj","path":"log4cj/src/logfile/log.cj","code_tokens":"public func writeLogF ( info : LogInfo ) {  if ( this . configInfo . outputFile ) {   let logF = OutputFile ( configInfo ) NL logF . setContent ( info . logContent ) NL logF . writeLogFile ( ) NL } NL }","func_name":"writeLogF","docstring":""}
{"repo":"log4cj","file":"jsonFormat.cj","path":"log4cj/src/tool/jsonFormat.cj","code_tokens":"public func getJsonString ( obj : JsonValue ) {   var jv : String = obj . toJsonString ( ) NL return jv NL }","func_name":"getJsonString","docstring":""}
{"repo":"log4cj","file":"getTime.cj","path":"log4cj/src/tool/getTime.cj","code_tokens":"static public func currentTime ( format ! : String = yyyy-MM-dd hh:mm:ss ) : String {  return Time . now ( ) . toString ( format ) NL }","func_name":"currentTime","docstring":"/**\n  * 获取当前时间\n  * 参数 format - 时间格式 (非必传)\n  * 返回值 String - 字符串表示的时间实例\n  */"}
{"repo":"log4cj","file":"getTime.cj","path":"log4cj/src/tool/getTime.cj","code_tokens":"static public func timeStamp ( ) : Int64 {  return Time . now ( ) . unixNano ( ) / 1000000 NL }","func_name":"timeStamp","docstring":"/**\n  * 获取当前时间戳 - 毫秒\n  * 返回值 Int64 - 耗秒为单位的时间戳\n  */"}
{"repo":"log4cj","file":"getTime.cj","path":"log4cj/src/tool/getTime.cj","code_tokens":"static public func timeStampSecond ( ) : Int64 {  return Time . now ( ) . unix ( ) NL }","func_name":"timeStampSecond","docstring":"/**\n  * 获取当前时间戳 - 秒\n  * 返回值 Int64 - 秒为单位的时间戳\n  */"}
