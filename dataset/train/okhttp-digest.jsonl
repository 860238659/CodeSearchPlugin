{"repo":"okhttp-digest","file":"langutils.cj","path":"okhttp-digest/src/langutils.cj","code_tokens":"static public func hashCode ( seed : Int32 , hashcode : Int32 ) : Int32 {  return seed * 37 + hashcode NL }","func_name":"hashCode","docstring":"/**\n     * The Function is hashCode\n     *\n     * @param seed of Int32\n     * @param hashcode of Int32\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"langutils.cj","path":"okhttp-digest/src/langutils.cj","code_tokens":"static public func hashCode ( seed : Int32 , b : Bool ) : Int32 {  if ( b ) {  return hashCode ( seed , 1 ) NL } else {  return hashCode ( seed , 0 ) NL } NL }","func_name":"hashCode","docstring":"/**\n     * The Function is hashCode\n     *\n     * @param seed of Int32\n     * @param hashcode of Int32\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"langutils.cj","path":"okhttp-digest/src/langutils.cj","code_tokens":"static public func hashCode ( seed : Int32 , obj : String ) : Int32 {  if ( obj . isEmpty ( ) ) {  return hashCode ( seed , 0 ) NL } else {  return hashCode ( seed , Int32 ( obj . hashCode ( ) ) ) NL } NL }","func_name":"hashCode","docstring":"/**\n     * The Function is hashCode\n     *\n     * @param seed of Int32\n     * @param hashcode of Int32\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"langutils.cj","path":"okhttp-digest/src/langutils.cj","code_tokens":"static public func hashCode ( seed : Int32 , obj : NameValuePair ) : Int32 {  return hashCode ( seed , Int32 ( obj . hashCode ( ) ) ) NL }","func_name":"hashCode","docstring":"/**\n     * The Function is hashCode\n     *\n     * @param seed of Int32\n     * @param hashcode of Int32\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"langutils.cj","path":"okhttp-digest/src/langutils.cj","code_tokens":"static public func equals ( obj1 : String , obj2 : String ) : Bool {  if ( obj1 . isEmpty ( ) ) {  return obj2 . isEmpty ( ) NL } else {  return obj1 . equals ( obj2 ) NL } NL }","func_name":"equals","docstring":"/**\n     * The Function is equals\n     *\n     * @param obj1 of String\n     * @param obj2 of String\n     *\n     * @return Type of Bool\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"langutils.cj","path":"okhttp-digest/src/langutils.cj","code_tokens":"static public func equals ( a1 : ArrayList < NameValuePair > , a2 : ArrayList < NameValuePair > ) : Bool {  if ( a1 . isEmpty ( ) ) {  return a2 . isEmpty ( ) NL } else if ( ! a2 . isEmpty ( ) && a1 . size == a2 . size ) {  for ( i in 0 .. a1 . size ) {  if ( a1 [ i ] . getName ( ) == a2 [ i ] . getName ( ) && a1 [ i ] . getValue ( ) == a2 [ i ] . getValue ( ) ) {  return true NL } NL } NL return true NL } else {  return false NL } NL }","func_name":"equals","docstring":"/**\n     * The Function is equals\n     *\n     * @param obj1 of String\n     * @param obj2 of String\n     *\n     * @return Type of Bool\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"header_valueParser.cj","path":"okhttp-digest/src/header_valueParser.cj","code_tokens":"func parseElements ( var1 : CharArrayBuffer , var2 : ParserCursor ) : ArrayList < BasicHeaderElement >","func_name":"parseElements","docstring":"/*\n     * The Function is parseElements\n     *\n     * @param var1 of CharArrayBuffer\n     * @param var2 of ParserCursor\n     *\n     * @return Type of ArrayList<BasicHeaderElement>\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"header_valueParser.cj","path":"okhttp-digest/src/header_valueParser.cj","code_tokens":"func parseHeaderElement ( var1 : CharArrayBuffer , var2 : ParserCursor ) : BasicHeaderElement","func_name":"parseHeaderElement","docstring":"/*\n     * The Function is parseHeaderElement\n     *\n     * @param var1 of CharArrayBuffer\n     * @param var2 of ParserCursor\n     *\n     * @return Type of BasicHeaderElement\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"header_valueParser.cj","path":"okhttp-digest/src/header_valueParser.cj","code_tokens":"func parseParameters ( var1 : CharArrayBuffer , var2 : ParserCursor ) : ArrayList < BasicNameValuePair >","func_name":"parseParameters","docstring":"/*\n     * The Function is parseParameters\n     *\n     * @param var1 of CharArrayBuffer\n     * @param var2 of ParserCursor\n     *\n     * @return Type of ArrayList<BasicNameValuePair>\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"header_valueParser.cj","path":"okhttp-digest/src/header_valueParser.cj","code_tokens":"func parseNameValuePair ( var1 : CharArrayBuffer , var2 : ParserCursor ) : BasicNameValuePair","func_name":"parseNameValuePair","docstring":"/*\n     * The Function is parseNameValuePair\n     *\n     * @param var1 of CharArrayBuffer\n     * @param var2 of ParserCursor\n     *\n     * @return Type of BasicNameValuePair\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"header_element.cj","path":"okhttp-digest/src/header_element.cj","code_tokens":"func getName ( ) : String","func_name":"getName","docstring":"/*\n     * The Function is getName\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"header_element.cj","path":"okhttp-digest/src/header_element.cj","code_tokens":"func getValue ( ) : String","func_name":"getValue","docstring":"/*\n     * The Function is getValue\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"header_element.cj","path":"okhttp-digest/src/header_element.cj","code_tokens":"func getParameters ( ) : ArrayList < BasicNameValuePair >","func_name":"getParameters","docstring":"/*\n     * The Function is getParameters\n     *\n     * @return Type of ArrayList<BasicNameValuePair>\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"header_element.cj","path":"okhttp-digest/src/header_element.cj","code_tokens":"func getParameterByName ( var1 : String ) : NameValuePair","func_name":"getParameterByName","docstring":"/*\n     * The Function is getParameterByName\n     *\n     * @param var1 of String\n     *\n     * @return Type of NameValuePair\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"header_element.cj","path":"okhttp-digest/src/header_element.cj","code_tokens":"func getParameterCount ( ) : Int32","func_name":"getParameterCount","docstring":"/*\n     * The Function is getParameterCount\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"header_element.cj","path":"okhttp-digest/src/header_element.cj","code_tokens":"func getParameter ( var1 : Int32 ) : NameValuePair","func_name":"getParameter","docstring":"/*\n     * The Function is getParameter\n     *\n     * @param var1 of Int32\n     *\n     * @return Type of NameValuePair\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"caching_authenticator.cj","path":"okhttp-digest/src/caching_authenticator.cj","code_tokens":"func authenticateWithState ( route : Route , request : Request ) : Request","func_name":"authenticateWithState","docstring":"/*\n     * The Function is authenticateWithState\n     *\n     * @param route of Route\n     * @param request of Request\n     *\n     * @return Type of Request\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_namevaluepair.cj","path":"okhttp-digest/src/basic_namevaluepair.cj","code_tokens":"public func getName ( ) : String {  return this . name NL }","func_name":"getName","docstring":"/**\n     * The Function is getName\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_namevaluepair.cj","path":"okhttp-digest/src/basic_namevaluepair.cj","code_tokens":"public func getValue ( ) : String {  return this . value NL }","func_name":"getValue","docstring":"/**\n     * The Function is getValue\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_namevaluepair.cj","path":"okhttp-digest/src/basic_namevaluepair.cj","code_tokens":"public func toString ( ) : String {  if ( this . value . isEmpty ( ) ) {  return this . name NL } else {   let len = this . name . size + 1 + this . value . size NL  var buffer : StringBuilder = StringBuilder ( ) NL buffer . append ( this . name ) NL buffer . append ( = ) NL buffer . append ( this . value ) NL return buffer . toString ( ) NL } NL }","func_name":"toString","docstring":"/**\n     * The Function is toString\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_namevaluepair.cj","path":"okhttp-digest/src/basic_namevaluepair.cj","code_tokens":"public func hashCode ( ) : Int64 {   let hash : Int32 = 17 NL  var hash1 : Int32 = LangUtils . hashCode ( hash , this . name ) NL hash1 = LangUtils . hashCode ( hash1 , this . value ) NL return Int64 ( hash1 ) NL }","func_name":"hashCode","docstring":"/**\n     * The Function is hashCode\n     *\n     * @return Type of Int64\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"args.cj","path":"okhttp-digest/src/args.cj","code_tokens":"static public func check ( expression : Bool , message : String ) {  if ( ! expression ) {  throw IllegalArgumentException ( message ) NL } NL }","func_name":"check","docstring":"/**\n     * The Function is check\n     *\n     * @param expression of Bool\n     * @param message of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"args.cj","path":"okhttp-digest/src/args.cj","code_tokens":"static public func notNull ( argument : String , name : String ) : String {  if ( argument . isEmpty ( ) ) {  throw IllegalArgumentException ( name +  may not be null ) NL } else {  return argument NL } NL }","func_name":"notNull","docstring":"/**\n     * The Function is notNull\n     *\n     * @param argument of String\n     * @param name of String\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"args.cj","path":"okhttp-digest/src/args.cj","code_tokens":"static public func positive ( n : Int32 , name : String ) : Int32 {  if ( n <= 0 ) {  throw IllegalArgumentException ( name +  may not be negative or zero ) NL } else {  return n NL } NL }","func_name":"positive","docstring":"/**\n     * The Function is positive\n     *\n     * @param n of Int32\n     * @param name of String\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"args.cj","path":"okhttp-digest/src/args.cj","code_tokens":"static public func positive ( n : Int64 , name : String ) : Int64 {  if ( n <= 0 ) {  throw IllegalArgumentException ( name +  may not be negative or zero ) NL } else {  return n NL } NL }","func_name":"positive","docstring":"/**\n     * The Function is positive\n     *\n     * @param n of Int32\n     * @param name of String\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"args.cj","path":"okhttp-digest/src/args.cj","code_tokens":"static public func notNegative ( n : Int32 , name : String ) : Int32 {  if ( n < 0 ) {  throw IllegalArgumentException ( name +  may not be negative ) NL } else {  return n NL } NL }","func_name":"notNegative","docstring":"/**\n     * The Function is notNegative\n     *\n     * @param n of Int32\n     * @param name of String\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"args.cj","path":"okhttp-digest/src/args.cj","code_tokens":"static public func notNegative ( n : Int64 , name : String ) : Int64 {  if ( n < 0 ) {  throw IllegalArgumentException ( name +  may not be negative ) NL } else {  return n NL } NL }","func_name":"notNegative","docstring":"/**\n     * The Function is notNegative\n     *\n     * @param n of Int32\n     * @param name of String\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"parser_cursor.cj","path":"okhttp-digest/src/parser_cursor.cj","code_tokens":"public func getLowerBound ( ) : Int32 {  return this . lowerBound NL }","func_name":"getLowerBound","docstring":"/**\n     * The Function is getLowerBound\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"parser_cursor.cj","path":"okhttp-digest/src/parser_cursor.cj","code_tokens":"public func getUpperBound ( ) : Int32 {  return this . upperBound NL }","func_name":"getUpperBound","docstring":"/**\n     * The Function is getUpperBound\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"parser_cursor.cj","path":"okhttp-digest/src/parser_cursor.cj","code_tokens":"public func getPos ( ) : Int32 {  return this . pos NL }","func_name":"getPos","docstring":"/**\n     * The Function is getPos\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"parser_cursor.cj","path":"okhttp-digest/src/parser_cursor.cj","code_tokens":"public func updatePos ( pos : Int32 ) {  if ( pos < this . lowerBound ) {  throw IndexOutOfBoundsException ( ) NL } else if ( pos > this . upperBound ) {  throw IndexOutOfBoundsException ( ) NL } else {  this . pos = pos NL } NL }","func_name":"updatePos","docstring":"/**\n     * The Function is updatePos\n     *\n     * @param pos of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"parser_cursor.cj","path":"okhttp-digest/src/parser_cursor.cj","code_tokens":"public func atEnd ( ) : Bool {  return this . pos > = this . upperBound NL }","func_name":"atEnd","docstring":"/**\n     * The Function is atEnd\n     *\n     * @return Type of Bool\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"parser_cursor.cj","path":"okhttp-digest/src/parser_cursor.cj","code_tokens":"public func toString ( ) : String {   var buffer : StringBuilder = StringBuilder ( ) NL buffer . append ( [ ) NL buffer . append ( this . lowerBound ) NL buffer . append ( > ) NL buffer . append ( this . pos ) NL buffer . append ( > ) NL buffer . append ( this . upperBound ) NL buffer . append ( ] ) NL return buffer . toString ( ) NL }","func_name":"toString","docstring":"/**\n     * The Function is toString\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"messagedigest.cj","path":"okhttp-digest/src/messagedigest.cj","code_tokens":"public func update ( str : String ) {  this . msg = str NL }","func_name":"update","docstring":"/**\n     * The Function is update\n     *\n     * @param str of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"messagedigest.cj","path":"okhttp-digest/src/messagedigest.cj","code_tokens":"public func reset ( ) {  this . msg =  NL }","func_name":"reset","docstring":"/**\n     * The Function is reset\n     *\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"messagedigest.cj","path":"okhttp-digest/src/messagedigest.cj","code_tokens":"public func digest ( ) : String {  return MD5 . digest ( msg ) NL }","func_name":"digest","docstring":"/**\n     * The Function is digest\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"private func expand ( newlen : Int32 ) {   let maxlen = max ( Int32 ( this . buffer . capacity ( ) << 1 ) , newlen ) NL  let newbuffer = ArrayList < Char > ( Int64 ( maxlen ) ) NL for ( i in 0 .. buffer . size ) {  newbuffer . insert ( i , this . buffer [ i ] ) NL } NL this . buffer = newbuffer NL }","func_name":"expand","docstring":""}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func append ( b : ArrayList < Char > , off : Int32 , len : Int32 ) {  if ( ! b . isEmpty ( ) ) {  if ( off > = 0 && off <= Int32 ( b . size ) && len > = 0 && off + len > = 0 && off + len <= Int32 ( b . size ) ) {  if ( len != 0 ) {   var newlen : Int32 = this . len + len NL if ( newlen > Int32 ( this . buffer . capacity ( ) ) ) {  this . expand ( newlen ) NL } NL  let bsize = off + len NL for ( i in off .. bsize ) {  this . buffer . append ( b [ Int64 ( i ) ] ) NL } NL this . len = newlen NL } NL } else {  throw IndexOutOfBoundsException ( ) NL } NL } NL }","func_name":"append","docstring":"/**\n     * The Function is append\n     *\n     * @param b of ArrayList<Char>\n     * @param off of Int32\n     * @param len of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func append ( str : String ) {   var sth : String = str NL if ( sth . isEmpty ( ) ) {  sth = null NL } NL  let strlen : Int32 = Int32 ( sth . size ) NL  let newlen : Int32 = this . len + strlen NL if ( newlen > Int32 ( this . buffer . capacity ( ) ) ) {  this . expand ( newlen ) NL } NL  let toChar : Array < Char > = sth . toCharArray ( ) NL this . buffer . appendAll ( toChar ) NL this . len = newlen NL }","func_name":"append","docstring":"/**\n     * The Function is append\n     *\n     * @param b of ArrayList<Char>\n     * @param off of Int32\n     * @param len of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func append ( b : CharArrayBuffer , off : Int32 , len : Int32 ) {  if ( ! b . isEmpty ( ) ) {  this . append ( b . buffer , off , len ) NL } NL }","func_name":"append","docstring":"/**\n     * The Function is append\n     *\n     * @param b of ArrayList<Char>\n     * @param off of Int32\n     * @param len of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func append ( b : CharArrayBuffer ) {  if ( ! b . isEmpty ( ) ) {  this . append ( b . buffer , 0 , b . len ) NL } NL }","func_name":"append","docstring":"/**\n     * The Function is append\n     *\n     * @param b of ArrayList<Char>\n     * @param off of Int32\n     * @param len of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func append ( ch : Char ) {   let newlen : Int32 = this . len + 1 NL if ( newlen > Int32 ( this . buffer . capacity ( ) ) ) {  this . expand ( newlen ) NL } NL this . buffer . insert ( Int64 ( this . len ) , ch ) NL this . len = newlen NL }","func_name":"append","docstring":"/**\n     * The Function is append\n     *\n     * @param b of ArrayList<Char>\n     * @param off of Int32\n     * @param len of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func append ( b : Array < UInt8 > , off : Int32 , len : Int32 ) {  if ( ! b . isEmpty ( ) ) {  if ( off > = 0 && off <= Int32 ( b . size ) && len > = 0 && off + len > = 0 && off + len <= Int32 ( b . size ) ) {  if ( len != 0 ) {   let oldlen : Int32 = this . len NL  let newlen : Int32 = oldlen + len NL if ( newlen > Int32 ( this . buffer . capacity ( ) ) ) {  this . expand ( newlen ) NL } NL  let bsize = off + len NL for ( i in off .. bsize ) {  this . buffer . append ( Char ( UInt32 ( b [ Int64 ( i ) ] ) ) ) NL } NL this . len = newlen NL } NL } else {  throw IndexOutOfBoundsException ( ) NL } NL } NL }","func_name":"append","docstring":"/**\n     * The Function is append\n     *\n     * @param b of ArrayList<Char>\n     * @param off of Int32\n     * @param len of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func clear ( ) {  this . buffer . clear ( ) NL this . len = 0 NL }","func_name":"clear","docstring":"/**\n     * The Function is clear\n     *\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func toCharArray ( ) : Array < Char > {  if ( this . len > 0 ) {  return Array < Char > ( this . buffer . size , { i => this . buffer [ i ] NL } ) NL } NL return Array < Char > ( ) NL }","func_name":"toCharArray","docstring":"/**\n     * The Function is toCharArray\n     *\n     * @return Type of Array<Char>\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func charAt ( ch : Int32 ) : Char {  return this . buffer [ Int64 ( ch ) ] NL }","func_name":"charAt","docstring":"/**\n     * The Function is charAt\n     *\n     * @param ch of Int32\n     *\n     * @return Type of Char\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func buffers ( ) : ArrayList < Char > {  return this . buffer NL }","func_name":"buffers","docstring":"/**\n     * The Function is buffers\n     *\n     * @return Type of ArrayList<Char>\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func capacity ( ) : Int32 {  return Int32 ( this . buffer . capacity ( ) ) NL }","func_name":"capacity","docstring":"/**\n     * The Function is capacity\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func length ( ) : Int32 {  return this . len NL }","func_name":"length","docstring":"/**\n     * The Function is length\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func ensureCapacity ( required : Int32 ) {  if ( required > 0 ) {   let available = Int32 ( this . buffer . capacity ( ) ) - this . len NL if ( required > available ) {  this . expand ( this . len + required ) NL } NL } NL }","func_name":"ensureCapacity","docstring":"/**\n     * The Function is ensureCapacity\n     *\n     * @param required of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func setLength ( len : Int32 ) {  if ( len > = 0 && len <= Int32 ( this . buffer . capacity ( ) ) ) {  this . len = len NL } else {  throw IndexOutOfBoundsException ( ) NL } NL }","func_name":"setLength","docstring":"/**\n     * The Function is setLength\n     *\n     * @param len of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func isEmpty ( ) : Bool {  return this . len == 0 NL }","func_name":"isEmpty","docstring":"/**\n     * The Function is isEmpty\n     *\n     * @return Type of Bool\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func isFull ( ) : Bool {  return this . len == Int32 ( this . buffer . capacity ( ) ) NL }","func_name":"isFull","docstring":"/**\n     * The Function is isFull\n     *\n     * @return Type of Bool\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func indexOf ( ch : Char , begin : Int32 , end : Int32 ) : Int32 {   var beginIndex : Int32 = begin NL  var endIndex : Int32 = end NL if ( beginIndex < 0 ) {  beginIndex = 0 NL } NL if ( endIndex > this . len ) {  endIndex = this . len NL } NL if ( beginIndex > endIndex ) {  return - 1 NL } else {  for ( i in beginIndex .. ( endIndex - 1 ) ) {  if ( this . buffer [ Int64 ( i ) ] == ch ) {  return i NL } NL } NL return - 1 NL } NL }","func_name":"indexOf","docstring":"/**\n     * The Function is indexOf\n     *\n     * @param ch of Char\n     * @param begin of Int32\n     * @param end of Int32\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func indexOf ( ch : Char ) : Int32 {  return this . indexOf ( ch , 0 , this . len ) NL }","func_name":"indexOf","docstring":"/**\n     * The Function is indexOf\n     *\n     * @param ch of Char\n     * @param begin of Int32\n     * @param end of Int32\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func substring ( beginIndex : Int32 , endIndex : Int32 ) : String {  if ( beginIndex < 0 ) {  throw IndexOutOfBoundsException ( ) NL } else if ( endIndex > this . len ) {  throw IndexOutOfBoundsException ( ) NL } else if ( beginIndex > endIndex ) {  throw IndexOutOfBoundsException ( ) NL } else {  return this . buffer . toString ( ) . substring ( Int64 ( beginIndex ) , Int64 ( endIndex - beginIndex ) ) NL } NL }","func_name":"substring","docstring":"/**\n     * The Function is substring\n     *\n     * @param beginIndex of Int32\n     * @param endIndex of Int32\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func substringTrimmed ( begin : Int32 , end : Int32 ) : String {   var beginIndex : Int32 = begin NL  var endIndex : Int32 = end NL if ( beginIndex < 0 ) {  throw IndexOutOfBoundsException ( ) NL } else if ( endIndex > this . len ) {  throw IndexOutOfBoundsException ( ) NL } else if ( beginIndex > endIndex ) {  throw IndexOutOfBoundsException ( ) NL } else {  while ( beginIndex < endIndex && HTTP . isWhitespace ( this . buffer [ Int64 ( beginIndex ) ] ) ) {  beginIndex ++ NL } NL while ( endIndex > beginIndex && HTTP . isWhitespace ( this . buffer [ Int64 ( endIndex - 1 ) ] ) ) {  endIndex -- NL } NL return this . buffer . toString ( ) . substring ( Int64 ( beginIndex ) , Int64 ( endIndex - beginIndex ) ) NL } NL }","func_name":"substringTrimmed","docstring":"/**\n     * The Function is substringTrimmed\n     *\n     * @param begin of Int32\n     * @param end of Int32\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"charArrayBuffer.cj","path":"okhttp-digest/src/charArrayBuffer.cj","code_tokens":"public func toString ( ) : String {  return this . buffer . toString ( ) NL }","func_name":"toString","docstring":"/**\n     * The Function is toString\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headervalueparser.cj","path":"okhttp-digest/src/basic_headervalueparser.cj","code_tokens":"public func parseElements ( value : String , parser : HeaderValueParser ) : ArrayList < BasicHeaderElement > {  Args . notNull ( value , Value ) NL  var buffer : CharArrayBuffer = CharArrayBuffer ( Int32 ( value . size ) ) NL buffer . append ( value ) NL  let cursor : ParserCursor = ParserCursor ( 0 , Int32 ( value . size ) ) NL return parser . parseElements ( buffer , cursor ) NL }","func_name":"parseElements","docstring":"/**\n     * The Function is parseElements\n     *\n     * @param value of String\n     * @param parser of HeaderValueParser\n     *\n     * @return Type of ArrayList<BasicHeaderElement>\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headervalueparser.cj","path":"okhttp-digest/src/basic_headervalueparser.cj","code_tokens":"public func parseElements ( buffer : CharArrayBuffer , cursor : ParserCursor ) : ArrayList < BasicHeaderElement > {   var elements : ArrayList < BasicHeaderElement > = ArrayList < BasicHeaderElement > ( ) NL while ( true ) {   var element : BasicHeaderElement = BasicHeaderElement (  ,  , ArrayList < BasicNameValuePair > ( ) ) NL do {  if ( cursor . atEnd ( ) ) {  return elements NL } NL element = this . parseHeaderElement ( buffer , cursor ) NL } while ( element . getName ( ) . size == 0 && element . getValue ( ) . isEmpty ( ) ) NL elements . append ( element ) NL } NL return elements NL }","func_name":"parseElements","docstring":"/**\n     * The Function is parseElements\n     *\n     * @param value of String\n     * @param parser of HeaderValueParser\n     *\n     * @return Type of ArrayList<BasicHeaderElement>\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headervalueparser.cj","path":"okhttp-digest/src/basic_headervalueparser.cj","code_tokens":"public func parseHeaderElement ( value : String , parser : HeaderValueParser ) : HeaderElement {  Args . notNull ( value , Value ) NL  var buffer : CharArrayBuffer = CharArrayBuffer ( Int32 ( value . size ) ) NL buffer . append ( value ) NL  let cursor : ParserCursor = ParserCursor ( 0 , Int32 ( value . size ) ) NL return parser . parseHeaderElement ( buffer , cursor ) NL }","func_name":"parseHeaderElement","docstring":"/**\n     * The Function is parseHeaderElement\n     *\n     * @param value of String\n     * @param parser of HeaderValueParser\n     *\n     * @return Type of HeaderElement\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headervalueparser.cj","path":"okhttp-digest/src/basic_headervalueparser.cj","code_tokens":"public func parseHeaderElement ( buffer : CharArrayBuffer , cursor : ParserCursor ) : BasicHeaderElement {   var nvp : BasicNameValuePair = this . parseNameValuePair ( buffer , cursor ) NL  var params : ArrayList < BasicNameValuePair > = ArrayList < BasicNameValuePair > ( ) NL if ( ! cursor . atEnd ( ) ) {   let ch = buffer . charAt ( cursor . getPos ( ) - 1 ) NL if ( ch != Char ( 44 ) ) {  params = this . parseParameters ( buffer , cursor ) NL } NL } NL return this . createHeaderElement ( nvp . getName ( ) , nvp . getValue ( ) , params ) NL }","func_name":"parseHeaderElement","docstring":"/**\n     * The Function is parseHeaderElement\n     *\n     * @param value of String\n     * @param parser of HeaderValueParser\n     *\n     * @return Type of HeaderElement\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headervalueparser.cj","path":"okhttp-digest/src/basic_headervalueparser.cj","code_tokens":"protected func createHeaderElement ( name : String , value : String , params : ArrayList < BasicNameValuePair > ) : BasicHeaderElement {  return BasicHeaderElement ( name , value , params ) NL }","func_name":"createHeaderElement","docstring":""}
{"repo":"okhttp-digest","file":"basic_headervalueparser.cj","path":"okhttp-digest/src/basic_headervalueparser.cj","code_tokens":"public func parseParameters ( value : String , parser : HeaderValueParser ) : ArrayList < BasicNameValuePair > {  Args . notNull ( value , Value ) NL  var buffer : CharArrayBuffer = CharArrayBuffer ( Int32 ( value . size ) ) NL buffer . append ( value ) NL  let cursor = ParserCursor ( 0 , Int32 ( value . size ) ) NL return parser . parseParameters ( buffer , cursor ) NL }","func_name":"parseParameters","docstring":"/**\n     * The Function is parseParameters\n     *\n     * @param value of String\n     * @param parser of HeaderValueParser\n     *\n     * @return Type of ArrayList<BasicNameValuePair>\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headervalueparser.cj","path":"okhttp-digest/src/basic_headervalueparser.cj","code_tokens":"public func parseParameters ( buffer : CharArrayBuffer , cursor : ParserCursor ) : ArrayList < BasicNameValuePair > {   var pos = cursor . getPos ( ) NL  let indexTo = cursor . getUpperBound ( ) NL for ( i in pos .. indexTo ) {  pos ++ NL  let params = buffer . charAt ( pos ) NL if ( ! HTTP . isWhitespace ( params ) ) {  break NL } NL } NL cursor . updatePos ( pos ) NL if ( cursor . atEnd ( ) ) {  return ArrayList < BasicNameValuePair > ( ) NL } else {   var var8 = ArrayList < BasicNameValuePair > ( ) NL while ( true ) {   let param = this . parseNameValuePair ( buffer , cursor ) NL var8 . append ( param ) NL  let ch = buffer . charAt ( cursor . getPos ( ) - 1 ) NL if ( ch == Char ( 44 ) ) {  break NL } NL if ( cursor . atEnd ( ) ) {  break NL } NL } NL return var8 NL } NL }","func_name":"parseParameters","docstring":"/**\n     * The Function is parseParameters\n     *\n     * @param value of String\n     * @param parser of HeaderValueParser\n     *\n     * @return Type of ArrayList<BasicNameValuePair>\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headervalueparser.cj","path":"okhttp-digest/src/basic_headervalueparser.cj","code_tokens":"public func parseNameValuePair ( value : String , parser : HeaderValueParser ) : BasicNameValuePair {  Args . notNull ( value , Value ) NL  var buffer : CharArrayBuffer = CharArrayBuffer ( Int32 ( value . size ) ) NL buffer . append ( value ) NL  let cursor = ParserCursor ( 0 , Int32 ( value . size ) ) NL return parser . parseNameValuePair ( buffer , cursor ) NL }","func_name":"parseNameValuePair","docstring":"/**\n     * The Function is parseNameValuePair\n     *\n     * @param value of String\n     * @param parser of HeaderValueParser\n     *\n     * @return Type of BasicNameValuePair\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headervalueparser.cj","path":"okhttp-digest/src/basic_headervalueparser.cj","code_tokens":"public func parseNameValuePair ( buffer : CharArrayBuffer , cursor : ParserCursor ) : BasicNameValuePair {  return this . parseNameValuePair ( buffer , cursor , ALL_DELIMITERS ) NL }","func_name":"parseNameValuePair","docstring":"/**\n     * The Function is parseNameValuePair\n     *\n     * @param value of String\n     * @param parser of HeaderValueParser\n     *\n     * @return Type of BasicNameValuePair\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headervalueparser.cj","path":"okhttp-digest/src/basic_headervalueparser.cj","code_tokens":"static private func isOneOf ( ch : Char , chs : Array < Char > ) : Bool {  if ( ! chs . isEmpty ( ) ) {   let arr : Array < Char > = chs NL  let len = chs . size NL for ( i in 0 .. len ) {   let ch2 = arr [ i ] NL if ( ch == ch2 ) {  return true NL } NL } NL } NL return false NL }","func_name":"isOneOf","docstring":""}
{"repo":"okhttp-digest","file":"basic_headervalueparser.cj","path":"okhttp-digest/src/basic_headervalueparser.cj","code_tokens":"public func parseNameValuePair ( buffer : CharArrayBuffer , cursor : ParserCursor , delimiters : Array < Char > ) : BasicNameValuePair {   var terted : Bool = false NL  var pos : Int32 = cursor . getPos ( ) NL  let indexFrom = cursor . getPos ( ) NL  var indexTo : Int32 = cursor . getUpperBound ( ) NL for ( i in pos .. ( indexTo - 1 ) ) {  pos ++ NL  let value = buffer . charAt ( pos ) NL if ( value == Char ( Int32 ( 61 ) ) ) {  break NL } NL if ( isOneOf ( value , delimiters ) ) {  terted = true NL break NL } NL } NL  var name : String NL if ( pos == indexTo ) {  terted = true NL name = buffer . substringTrimmed ( indexFrom , indexTo ) NL } else {  name = buffer . substringTrimmed ( indexFrom , pos ) NL pos ++ NL } NL if ( terted ) {  cursor . updatePos ( pos ) NL return this . createNameValuePair ( name ,  ) NL } else {   var i1 : Int32 = pos NL  var qout : Bool = false NL for ( i in pos .. indexTo ) {   let is2 = buffer . charAt ( pos ) NL  var esced : Bool = false NL if ( is2 == Char ( 34 ) && ! esced ) {  qout = ! qout NL } NL if ( ! qout && ! esced && isOneOf ( is2 , delimiters ) ) {  terted = true NL break NL } NL if ( esced ) {  esced = false NL } else {  esced = ( qout && is2 == Char ( 92 ) ) NL } NL } NL  var var15 : Int32 = pos NL if ( i1 < var15 ) {  for ( i in i1 .. var15 ) {  if ( HTTP . isWhitespace ( buffer . charAt ( i1 ) ) ) {  i1 ++ NL } NL if ( HTTP . isWhitespace ( buffer . charAt ( var15 - 1 ) ) ) {  var15 -- NL } NL } NL } NL if ( var15 - i1 > = 2 && buffer . charAt ( i1 ) == Char ( 34 ) && buffer . charAt ( var15 - 1 ) == Char ( 34 ) ) {  i1 ++ NL var15 -- NL } NL  let var14 = buffer . substring ( i1 , var15 ) NL if ( terted ) {  pos ++ NL } NL cursor . updatePos ( pos ) NL return this . createNameValuePair ( name , var14 ) NL } NL }","func_name":"parseNameValuePair","docstring":"/**\n     * The Function is parseNameValuePair\n     *\n     * @param value of String\n     * @param parser of HeaderValueParser\n     *\n     * @return Type of BasicNameValuePair\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headervalueparser.cj","path":"okhttp-digest/src/basic_headervalueparser.cj","code_tokens":"protected func createNameValuePair ( name : String , value : String ) : BasicNameValuePair {  return BasicNameValuePair ( name , value ) NL }","func_name":"createNameValuePair","docstring":""}
{"repo":"okhttp-digest","file":"credentials.cj","path":"okhttp-digest/src/credentials.cj","code_tokens":"public func getUserName ( ) : String {  return userName NL }","func_name":"getUserName","docstring":"/**\n     * The Function is getUserName\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"credentials.cj","path":"okhttp-digest/src/credentials.cj","code_tokens":"public func setUserName ( userName : String ) {  this . userName = userName NL }","func_name":"setUserName","docstring":"/**\n     * The Function is setUserName\n     *\n     * @param userName of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"credentials.cj","path":"okhttp-digest/src/credentials.cj","code_tokens":"public func getPassword ( ) : String {  return password NL }","func_name":"getPassword","docstring":"/**\n     * The Function is getPassword\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"credentials.cj","path":"okhttp-digest/src/credentials.cj","code_tokens":"public func setPassword ( password : String ) {  this . password = password NL }","func_name":"setPassword","docstring":"/**\n     * The Function is setPassword\n     *\n     * @param password of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headervalue.cj","path":"okhttp-digest/src/basic_headervalue.cj","code_tokens":"public func formatNameValuePair ( buffer : StringBuilder , nvp : NameValuePair , quotes : Bool ) : StringBuilder {   var charBuffer = buffer NL charBuffer . append ( nvp . getName ( ) ) NL  let value : String = nvp . getValue ( ) NL if ( ! value . isEmpty ( ) ) {  charBuffer . append ( = ) NL this . doFormatValue ( charBuffer , value , quotes ) NL } NL return charBuffer NL }","func_name":"formatNameValuePair","docstring":"/**\n     * The Function is formatNameValuePair\n     *\n     * @param buffer of StringBuilder\n     * @param nvp of NameValuePair\n     * @param quotes of Bool\n     *\n     * @return Type of StringBuilder\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headervalue.cj","path":"okhttp-digest/src/basic_headervalue.cj","code_tokens":"protected func doFormatValue ( buffers : StringBuilder , value : String , quotes : Bool ) {   var buffer = buffers NL  var quoteFlag : Bool = quotes NL if ( ! quotes ) {  for ( i in 0 .. value . size ) {  quoteFlag = this . isSeparator ( value . charAt ( i ) ) NL } NL } NL if ( quoteFlag ) {  buffer . append ( \\\" ) NL } NL for ( i in 0 .. value . size ) {   var ch = value . charAt ( i ) NL if ( this . isUnsafe ( ch ) ) {  buffer . append ( \\\\ ) NL } NL buffer . append ( ch ) NL } NL if ( quoteFlag ) {  buffer . append ( \\\" ) NL } NL }","func_name":"doFormatValue","docstring":""}
{"repo":"okhttp-digest","file":"basic_headervalue.cj","path":"okhttp-digest/src/basic_headervalue.cj","code_tokens":"protected func isSeparator ( ch : Char ) : Bool {  match (  ;,:@()<>\\\\\\\"/[]?={}\\t . indexOf ( ch ) ) { case Some ( v ) => return v > = 0 NL case _ => return false NL } NL }","func_name":"isSeparator","docstring":""}
{"repo":"okhttp-digest","file":"basic_headervalue.cj","path":"okhttp-digest/src/basic_headervalue.cj","code_tokens":"protected func isUnsafe ( ch : Char ) : Bool {  match ( \\\"\\\\ . indexOf ( ch ) ) { case Some ( v ) => return v > = 0 NL case _ => return false NL } NL }","func_name":"isUnsafe","docstring":""}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func write ( arrayToWrite : Array < Byte > ) : BufferedSink {  return this NL }","func_name":"write","docstring":"/**\n     * The Function is write\n     *\n     * @param arrayToWrite of Array<UInt8>\n     *\n     * @return Type of Int64\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func write ( arrayToWrite : Array < UInt8 > , off : Int64 , cnt : Int64 ) : BufferedSink {  return this NL }","func_name":"write","docstring":"/**\n     * The Function is write\n     *\n     * @param arrayToWrite of Array<UInt8>\n     *\n     * @return Type of Int64\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func write ( byteString : ByteString ) : BufferedSink {  this . digester . update ( byteString . toString ( ) ) NL return this NL }","func_name":"write","docstring":"/**\n     * The Function is write\n     *\n     * @param arrayToWrite of Array<UInt8>\n     *\n     * @return Type of Int64\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func write ( source : Buffer ) : BufferedSink {  this . digester . update ( source . readString ( ) . getOrThrow ( ) ) NL return this NL }","func_name":"write","docstring":"/**\n     * The Function is write\n     *\n     * @param arrayToWrite of Array<UInt8>\n     *\n     * @return Type of Int64\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func writeAll ( source : okio . Source ) : Int64 {  return 0 NL }","func_name":"writeAll","docstring":"/**\n     * The Function is writeAll\n     *\n     * @param source of Source\n     *\n     * @return Type of Int64\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func write ( source : okio . Source , byteCount : Int64 ) : BufferedSink {  if ( this . closed ) {  throw Exception ( Stream has been already closed ) NL } NL return this NL }","func_name":"write","docstring":"/**\n     * The Function is write\n     *\n     * @param arrayToWrite of Array<UInt8>\n     *\n     * @return Type of Int64\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func write ( source : Buffer , byteCount : Int64 ) : Unit {  }","func_name":"write","docstring":"/**\n     * The Function is write\n     *\n     * @param arrayToWrite of Array<UInt8>\n     *\n     * @return Type of Int64\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func write ( byteString : ByteString , offset : Int64 , byteCount : Int64 ) : BufferedSink {  return this NL }","func_name":"write","docstring":"/**\n     * The Function is write\n     *\n     * @param arrayToWrite of Array<UInt8>\n     *\n     * @return Type of Int64\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func writeUtf8 ( string : String ) : BufferedSink {  return this NL }","func_name":"writeUtf8","docstring":"/**\n     * The Function is writeUtf8\n     *\n     * @param string of String\n     *\n     * @return Type of BufferedSink\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func writeUtf8 ( string : String , beginIndex : Int64 , endIndex : Int64 ) : BufferedSink {  return this NL }","func_name":"writeUtf8","docstring":"/**\n     * The Function is writeUtf8\n     *\n     * @param string of String\n     *\n     * @return Type of BufferedSink\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func writeUtf8CodePoint ( codePoint : Int64 ) : BufferedSink {  return this NL }","func_name":"writeUtf8CodePoint","docstring":"/**\n     * The Function is writeUtf8CodePoint\n     *\n     * @param codePoint of Int64\n     *\n     * @return Type of BufferedSink\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func writeByte ( value : Int64 ) : BufferedSink {  return this NL }","func_name":"writeByte","docstring":"/**\n     * The Function is writeByte\n     *\n     * @param value of Int64\n     *\n     * @return Type of BufferedSink\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func writeInt8 ( value : Int64 ) : BufferedSink {  return this NL }","func_name":"writeInt8","docstring":""}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func emitCompleteSegments ( ) : BufferedSink {  return this NL }","func_name":"emitCompleteSegments","docstring":""}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func writeInt32 ( value : Int64 ) : BufferedSink {  return this NL }","func_name":"writeInt32","docstring":""}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func writeInt32Le ( value : Int64 ) : BufferedSink {  return this NL }","func_name":"writeInt32Le","docstring":""}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func writeInt16 ( value : Int64 ) : BufferedSink {  return this NL }","func_name":"writeInt16","docstring":"/**\n     * The Function is writeInt16\n     *\n     * @param value of Int64\n     *\n     * @return Type of BufferedSink\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func writeInt16Le ( value : Int64 ) : BufferedSink {  return this NL }","func_name":"writeInt16Le","docstring":"/**\n     * The Function is writeInt16Le\n     *\n     * @param value of Int64\n     *\n     * @return Type of BufferedSink\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func writeInt64 ( value : Int64 ) : BufferedSink {  return this NL }","func_name":"writeInt64","docstring":"/**\n     * The Function is writeInt64\n     *\n     * @param value of Int64\n     *\n     * @return Type of BufferedSink\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func writeInt64Le ( value : Int64 ) : BufferedSink {  return this NL }","func_name":"writeInt64Le","docstring":"/**\n     * The Function is writeInt64Le\n     *\n     * @param value of Int64\n     *\n     * @return Type of BufferedSink\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func writeDecimalInt64 ( value : Int64 ) : BufferedSink {  return this NL }","func_name":"writeDecimalInt64","docstring":"/**\n     * The Function is writeDecimalInt64\n     *\n     * @param value of Int64\n     *\n     * @return Type of BufferedSink\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func writeHexadecimalUInt64 ( value : Int64 ) : BufferedSink {  return this NL }","func_name":"writeHexadecimalUInt64","docstring":"/**\n     * The Function is writeHexadecimalUInt64\n     *\n     * @param value of Int64\n     *\n     * @return Type of BufferedSink\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func emit ( ) : BufferedSink {  return this NL }","func_name":"emit","docstring":"/**\n     * The Function is emit\n     *\n     * @return Type of BufferedSink\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func flush ( ) : Unit {  }","func_name":"flush","docstring":"/**\n     * The Function is flush\n     *\n     * @return Type of Unit\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func timeout ( ) : okio . Timeout {  return okio . Timeout ( ) NL }","func_name":"timeout","docstring":"/**\n     * The Function is timeout\n     *\n     * @return Type of Duration\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func isOpen ( ) : Bool {  return false NL }","func_name":"isOpen","docstring":"/**\n     * The Function is isOpen\n     *\n     * @return Type of Bool\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func close ( ) {  if ( this . closed ) {  return NL } NL this . closed = true NL this . digest = this . digester . digest ( ) NL buffers . close ( ) NL }","func_name":"close","docstring":"/**\n     * The Function is close\n     *\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func toString ( ) : String {  return digest NL }","func_name":"toString","docstring":""}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func isClosed ( ) : Bool {  return closed NL }","func_name":"isClosed","docstring":"/**\n    * The Function is isClosed\n    *\n    * @since 30.4\n    */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func getDigest ( ) : String {  return this . digest NL }","func_name":"getDigest","docstring":"/**\n     * The Function is getDigest\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"httpentity_digester.cj","path":"okhttp-digest/src/httpentity_digester.cj","code_tokens":"public func buffer ( ) : Buffer {  return buffers NL }","func_name":"buffer","docstring":"/**\n     * The Function is getBuffer\n     *\n     * @return Type of Buffer\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"http.cj","path":"okhttp-digest/src/http.cj","code_tokens":"static public func isWhitespace ( ch : Char ) : Bool {  return UInt32 ( ch ) == 32 || UInt32 ( ch ) == 9 || UInt32 ( ch ) == 13 || UInt32 ( ch ) == 10 NL }","func_name":"isWhitespace","docstring":"/**\n     * The Function is isWhitespace\n     *\n     * @param ch of Char\n     *\n     * @return Type of Bool\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headerelement.cj","path":"okhttp-digest/src/basic_headerelement.cj","code_tokens":"public func getName ( ) : String {  return this . name NL }","func_name":"getName","docstring":"/**\n     * The Function is getName\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headerelement.cj","path":"okhttp-digest/src/basic_headerelement.cj","code_tokens":"public func getValue ( ) : String {  return this . value NL }","func_name":"getValue","docstring":"/**\n     * The Function is getValue\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headerelement.cj","path":"okhttp-digest/src/basic_headerelement.cj","code_tokens":"public func getParameters ( ) : ArrayList < BasicNameValuePair > {  return this . parameters . clone ( ) NL }","func_name":"getParameters","docstring":"/**\n     * The Function is getParameters\n     *\n     * @return Type of ArrayList<BasicNameValuePair>\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headerelement.cj","path":"okhttp-digest/src/basic_headerelement.cj","code_tokens":"public func getParameterCount ( ) : Int32 {  return Int32 ( this . parameters . size ) NL }","func_name":"getParameterCount","docstring":"/**\n     * The Function is getParameterCount\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headerelement.cj","path":"okhttp-digest/src/basic_headerelement.cj","code_tokens":"public func getParameter ( index : Int32 ) : BasicNameValuePair {  return this . parameters [ Int64 ( index ) ] NL }","func_name":"getParameter","docstring":"/**\n     * The Function is getParameter\n     *\n     * @param index of Int32\n     *\n     * @return Type of BasicNameValuePair\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headerelement.cj","path":"okhttp-digest/src/basic_headerelement.cj","code_tokens":"public func getParameterByName ( name : String ) : BasicNameValuePair {  if ( name . isEmpty ( ) ) {  throw IllegalArgumentException ( Name may not be null ) NL } else {   var found : BasicNameValuePair = BasicNameValuePair ( name ,  ) NL for ( i in 0 .. this . parameters . size ) {   var current = this . parameters [ i ] NL if ( ( current . getName ( ) . toLower ( ) ) . equals ( name . toLower ( ) ) ) {  found = current NL break NL } NL } NL return found NL } NL }","func_name":"getParameterByName","docstring":"/**\n     * The Function is getParameterByName\n     *\n     * @param name of String\n     *\n     * @return Type of BasicNameValuePair\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headerelement.cj","path":"okhttp-digest/src/basic_headerelement.cj","code_tokens":"public func hashCode ( ) : Int32 {   let hash : Int32 = 17 NL  var var3 = LangUtils . hashCode ( hash , this . name ) NL var3 = LangUtils . hashCode ( var3 , this . value ) NL for ( i in 0 .. this . parameters . size ) {  var3 = LangUtils . hashCode ( var3 , this . parameters [ i ] ) NL } NL return var3 NL }","func_name":"hashCode","docstring":"/**\n     * The Function is hashCode\n     *\n     * @return Type of Int32\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"basic_headerelement.cj","path":"okhttp-digest/src/basic_headerelement.cj","code_tokens":"public func toString ( ) : String {   var buffer : StringBuilder = StringBuilder ( ) NL buffer . append ( this . name ) NL if ( ! this . value . isEmpty ( ) ) {  buffer . append ( = ) NL buffer . append ( this . value ) NL } NL for ( i in 0 .. this . parameters . size ) {  buffer . append ( ;  ) NL buffer . append ( this . parameters [ Int64 ( i ) ] . getName ( ) ) NL buffer . append ( this . parameters [ Int64 ( i ) ] . getValue ( ) ) NL } NL return buffer . toString ( ) NL }","func_name":"toString","docstring":"/**\n     * The Function is toString\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"nameValuePair.cj","path":"okhttp-digest/src/nameValuePair.cj","code_tokens":"func getName ( ) : String","func_name":"getName","docstring":"/*\n     * The Function is getName\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"nameValuePair.cj","path":"okhttp-digest/src/nameValuePair.cj","code_tokens":"func getValue ( ) : String","func_name":"getValue","docstring":"/*\n     * The Function is getValue\n     *\n     * @return Type of String\n     * @since 30.4\n     */"}
{"repo":"okhttp-digest","file":"nameValuePair.cj","path":"okhttp-digest/src/nameValuePair.cj","code_tokens":"func hashCode ( ) : Int64","func_name":"hashCode","docstring":"/*\n     * The Function is hashCode\n     *\n     * @return Type of Int64\n     * @since 30.4\n     */"}
