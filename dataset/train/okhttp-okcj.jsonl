{"repo":"okhttp-okcj","file":"CallAdapter.cj","path":"okhttp-okcj/src/CallAdapter.cj","code_tokens":"func adapt ( call : Call , param : AdapterParam ) : Call","func_name":"adapt","docstring":""}
{"repo":"okhttp-okcj","file":"CacheMode.cj","path":"okhttp-okcj/src/CacheMode.cj","code_tokens":"public operator func == ( that : CacheMode ) : Bool {  match ( ( this , that ) ) { case ( DEFAULT , DEFAULT ) => true NL case ( NO_CACHE , NO_CACHE ) => true NL case ( REQUEST_FAILED_READ_CACHE , REQUEST_FAILED_READ_CACHE ) => true NL case ( IF_NONE_CACHE_REQUEST , IF_NONE_CACHE_REQUEST ) => true NL case ( FIRST_CACHE_THEN_REQUEST , FIRST_CACHE_THEN_REQUEST ) => true NL case _ => false NL } NL }","func_name":"==","docstring":""}
{"repo":"okhttp-okcj","file":"CacheMode.cj","path":"okhttp-okcj/src/CacheMode.cj","code_tokens":"public operator func != ( that : CacheMode ) : Bool {  return ! ( this == that ) NL }","func_name":"!=","docstring":""}
{"repo":"okhttp-okcj","file":"CacheMode.cj","path":"okhttp-okcj/src/CacheMode.cj","code_tokens":"public func toString ( ) : String {  return match ( this ) { case DEFAULT => DEFAULT NL case NO_CACHE => NO_CACHE NL case REQUEST_FAILED_READ_CACHE => REQUEST_FAILED_READ_CACHE NL case IF_NONE_CACHE_REQUEST => IF_NONE_CACHE_REQUEST NL case FIRST_CACHE_THEN_REQUEST => FIRST_CACHE_THEN_REQUEST NL } NL }","func_name":"toString","docstring":""}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func retry ( retryCount : Int64 ) : Request {  if ( retryCount < 0 ) {  throw IllegalArgumentException ( retryCount must > 0 ) NL } NL this . retryCount = retryCount NL return this NL }","func_name":"retry","docstring":"/**\r\n     * The Function is retry\r\n     *\r\n     * @param retryCount of Int64\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getClient ( client : okhttp . OkHttpClient ) : Request {  this . client = client NL return this NL }","func_name":"getClient","docstring":"/**\r\n     * The Function is getClient\r\n     *\r\n     * @param client of okhttp.OkHttpClient\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getCall ( call : Call ) : Request {  this . call = call NL return this NL }","func_name":"getCall","docstring":"/**\r\n     * The Function is getCall\r\n     *\r\n     * @param call of Call\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getConverter ( converter : Converter ) : Request {  this . converter = converter NL return this NL }","func_name":"getConverter","docstring":"/**\r\n     * The Function is getConverter\r\n     *\r\n     * @param converter of Converter\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getCacheMode ( cacheMode : CacheMode ) : Request {  this . cacheMode = cacheMode NL return this NL }","func_name":"getCacheMode","docstring":"/**\r\n     * The Function is getCacheMode\r\n     *\r\n     * @param cacheMode of CacheMode\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getCachePolicy ( cachePolicy : CachePolicy ) : Request {  this . cachePolicy = cachePolicy NL return this NL }","func_name":"getCachePolicy","docstring":"/**\r\n     * The Function is getCachePolicy\r\n     *\r\n     * @param cachePolicy of CachePolicy\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getCacheKey ( cacheKey : String ) : Request {  this . cacheKey = cacheKey NL return this NL }","func_name":"getCacheKey","docstring":"/**\r\n     * The Function is getCacheKey\r\n     *\r\n     * @param cacheKey of String\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getCacheTime ( cacheTime : Int64 ) : Request {  if ( cacheTime <= - 1 ) {  this . cacheTime = CacheEntity . CACHE_NEVER_EXPIRE NL } else {  this . cacheTime = cacheTime NL } NL return this NL }","func_name":"getCacheTime","docstring":"/**\r\n     * The Function is getCacheTime\r\n     *\r\n     * @param cacheTime of Int64\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getHeaders ( headers : HttpHeaders ) : Request {  this . headers . put ( headers ) NL return this NL }","func_name":"getHeaders","docstring":"/**\r\n     * The Function is getHeaders\r\n     *\r\n     * @param headers of HttpHeaders\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getHeaders ( key : String , value : String ) : Request {  headers . put ( key , value ) NL return this NL }","func_name":"getHeaders","docstring":"/**\r\n     * The Function is getHeaders\r\n     *\r\n     * @param headers of HttpHeaders\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func removeHeader ( key : String ) : Request {  headers . remove ( key ) NL return this NL }","func_name":"removeHeader","docstring":"/**\r\n     * The Function is removeHeader\r\n     *\r\n     * @param key of String\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func removeAllHeaders ( ) : Request {  headers . clear ( ) NL return this NL }","func_name":"removeAllHeaders","docstring":"/**\r\n     * The Function is removeAllHeaders\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func addParams ( params : HttpParams ) : Request {  this . params . put ( params ) NL return this NL }","func_name":"addParams","docstring":"/**\r\n     * The Function is addParams\r\n     *\r\n     * @param params of HttpParams\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func addUrlParams ( key : String , values : ArrayList < String > ) : Request {  params . putUrlParams ( key , values ) NL return this NL }","func_name":"addUrlParams","docstring":"/**\r\n     * The Function is addUrlParams\r\n     *\r\n     * @param key of String\r\n     * @param values of ArrayList<String>\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func removeParam ( key : String ) : Request {  params . remove ( key ) NL return this NL }","func_name":"removeParam","docstring":"/**\r\n     * The Function is removeParam\r\n     *\r\n     * @param key of String\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func removeAllParams ( ) : Request {  params . clear ( ) NL return this NL }","func_name":"removeAllParams","docstring":"/**\r\n     * The Function is removeAllParams\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func uploadingInterceptor ( uploadInterceptor : UploadInterceptor ) : Request {  this . uploadInterceptor = uploadInterceptor NL return this NL }","func_name":"uploadingInterceptor","docstring":"/**\r\n     * The Function is uploadingInterceptor\r\n     *\r\n     * @param uploadInterceptor of UploadInterceptor\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getUrlParam ( key : String ) : String {   var values : ArrayList < String > = params . urlParamsMap . get ( key ) . getOrThrow ( ) NL if ( ! ( values . isEmpty ( ) ) && values . size > 0 ) {  return values . get ( 0 ) . getOrThrow ( ) NL } NL return  NL }","func_name":"getUrlParam","docstring":"/**\r\n     * The Function is getUrlParam\r\n     *\r\n     * @param key of String\r\n     *\r\n     * @return Type of String\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getFileParam ( key : String ) : FileWrapper {   var values : ArrayList < FileWrapper > = params . fileParamsMap . get ( key ) . getOrThrow ( ) NL if ( ! ( values . isEmpty ( ) ) && values . size > 0 ) {  return values . get ( 0 ) . getOrThrow ( ) NL } NL return FileWrapper ( ) NL }","func_name":"getFileParam","docstring":"/**\r\n     * The Function is getFileParam\r\n     *\r\n     * @param key of String\r\n     *\r\n     * @return Type of FileWrapper\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func returnParams ( ) : HttpParams {  return params NL }","func_name":"returnParams","docstring":"/**\r\n     * The Function is returnParams\r\n     *\r\n     * @return Type of HttpParams\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func returnHeaders ( ) : HttpHeaders {  return headers NL }","func_name":"returnHeaders","docstring":"/**\r\n     * The Function is returnHeaders\r\n     *\r\n     * @return Type of HttpHeaders\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getUrl ( ) : String {  return url NL }","func_name":"getUrl","docstring":"/**\r\n     * The Function is getUrl\r\n     *\r\n     * @return Type of String\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getBaseUrl ( ) : String {  return baseUrl NL }","func_name":"getBaseUrl","docstring":"/**\r\n     * The Function is getBaseUrl\r\n     *\r\n     * @return Type of String\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getCacheMode ( ) : CacheMode {  return cacheMode NL }","func_name":"getCacheMode","docstring":"/**\r\n     * The Function is getCacheMode\r\n     *\r\n     * @param cacheMode of CacheMode\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getCachePolicy ( ) : CachePolicy {  return cachePolicy NL }","func_name":"getCachePolicy","docstring":"/**\r\n     * The Function is getCachePolicy\r\n     *\r\n     * @param cachePolicy of CachePolicy\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getCacheKey ( ) : String {  return cacheKey NL }","func_name":"getCacheKey","docstring":"/**\r\n     * The Function is getCacheKey\r\n     *\r\n     * @param cacheKey of String\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getCacheTime ( ) : Int64 {  return cacheTime NL }","func_name":"getCacheTime","docstring":"/**\r\n     * The Function is getCacheTime\r\n     *\r\n     * @param cacheTime of Int64\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getRetryCount ( ) : Int64 {  return retryCount NL }","func_name":"getRetryCount","docstring":"/**\r\n     * The Function is getRetryCount\r\n     *\r\n     * @return Type of Int64\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getRequest ( ) : okhttp . Request {  return mRequest NL }","func_name":"getRequest","docstring":"/**\r\n     * The Function is getRequest\r\n     *\r\n     * @return Type of okhttp.Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func setCallback ( callback : Callback ) {  this . callback = callback NL }","func_name":"setCallback","docstring":"/**\r\n     * The Function is setCallback\r\n     *\r\n     * @param callback of Callback\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getConverter ( ) : Converter {  return converter NL }","func_name":"getConverter","docstring":"/**\r\n     * The Function is getConverter\r\n     *\r\n     * @param converter of Converter\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func generationRequestBuilder ( progressRequestBody : ProgressRequestBody ) : okhttp . RequestBuilder {  try {  getHeaders ( HttpHeaders . HEAD_KEY_CONTENT_LENGTH , ${progressRequestBody.contentLength()} ) NL ( ) NL } catch ( e : IOException ) {  e . printStackTrace ( ) NL } NL  var requestBuilder : okhttp . RequestBuilder = okhttp . Request . builder ( ) NL return HttpUtils . appendHeaders ( requestBuilder , headers ) NL }","func_name":"generationRequestBuilder","docstring":""}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func generationRequest ( progressRequestBody : ProgressRequestBody ) : okhttp . Request {   var requestBuilder : okhttp . RequestBuilder = generationRequestBuilder ( progressRequestBody ) NL return requestBuilder . url ( url ) . build ( ) NL }","func_name":"generationRequest","docstring":""}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func getRawCall ( ) : okhttp . Call {   var reqb : okhttp . RequestBody = RequestBody ( text/plain , application/json ) NL  var progressRequestBody : ProgressRequestBody = ProgressRequestBody ( reqb ) NL progressRequestBody . setInterceptor ( uploadInterceptor ) NL mRequest = generationRequest ( progressRequestBody ) NL client = OkCj . getInstance ( ) . getOkHttpClient ( ) NL return client . newCall ( mRequest ) NL }","func_name":"getRawCall","docstring":"/**\r\n     * The Function is getRawCall\r\n     *\r\n     * @return Type of okhttp.Call\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func adapt ( ) : Call {  return call NL }","func_name":"adapt","docstring":"/**\r\n     * The Function is adapt\r\n     *\r\n     * @return Type of Call\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"Request.cj","path":"okhttp-okcj/src/Request.cj","code_tokens":"public func execute ( callback : Callback ) : Unit {  this . callback = callback NL  var call : Call = adapt ( ) NL call . execute ( callback ) NL }","func_name":"execute","docstring":"/**\r\n     * The Function is execute\r\n     *\r\n     * @param callback of Callback\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpHeaders.cj","path":"okhttp-okcj/src/HttpHeaders.cj","code_tokens":"public func put ( key : String , value : String ) {  if ( ! ( key . isEmpty ( ) ) && ! ( value . isEmpty ( ) ) ) {  headersMap . put ( key , value ) NL } NL }","func_name":"put","docstring":"/**\r\n     * The Function is put\r\n     *\r\n     * @param key of String\r\n     * @param value of String\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpHeaders.cj","path":"okhttp-okcj/src/HttpHeaders.cj","code_tokens":"public func put ( headers : HttpHeaders ) {  if ( ! ( headers . headersMap . isEmpty ( ) ) ) {  headersMap . putAll ( headers . headersMap ) NL } NL }","func_name":"put","docstring":"/**\r\n     * The Function is put\r\n     *\r\n     * @param key of String\r\n     * @param value of String\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpHeaders.cj","path":"okhttp-okcj/src/HttpHeaders.cj","code_tokens":"public func get ( key : String ) {  return headersMap . get ( key ) NL }","func_name":"get","docstring":""}
{"repo":"okhttp-okcj","file":"HttpHeaders.cj","path":"okhttp-okcj/src/HttpHeaders.cj","code_tokens":"public func remove ( key : String ) {  return headersMap . remove ( key ) NL }","func_name":"remove","docstring":"/**\r\n     * The Function is remove\r\n     *\r\n     * @param key of String\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpHeaders.cj","path":"okhttp-okcj/src/HttpHeaders.cj","code_tokens":"public func clear ( ) {  headersMap . clear ( ) NL }","func_name":"clear","docstring":"/**\r\n     * The Function is clear\r\n     *\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpHeaders.cj","path":"okhttp-okcj/src/HttpHeaders.cj","code_tokens":"static public func getCacheControl ( cacheControl : String , pragma : String ) : String {  if ( ! ( cacheControl . isEmpty ( ) ) ) {  return cacheControl NL } else if ( ! ( pragma . isEmpty ( ) ) ) {  return pragma NL } else {  return  NL } NL }","func_name":"getCacheControl","docstring":""}
{"repo":"okhttp-okcj","file":"HttpUtils.cj","path":"okhttp-okcj/src/HttpUtils.cj","code_tokens":"static public func guessMimeType ( fileName : String ) : String {   var temp = fileName . replace ( # ,  ) NL if ( temp . isEmpty ( ) ) {  return HttpParams . MEDIA_TYPE_STREAM NL } NL return temp NL }","func_name":"guessMimeType","docstring":"/**\r\n     * The Function is guessMimeType\r\n     *\r\n     * @param fileName of String\r\n     *\r\n     * @return Type of String\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpUtils.cj","path":"okhttp-okcj/src/HttpUtils.cj","code_tokens":"static public func createUrlFromParams ( url : String , params : LinkedHashMap < String , ArrayList < String > > ) : String {  try {   let sb : StringBuilder = StringBuilder ( ) NL sb . append ( url ) NL if ( url . contains ( & ) || url . contains ( ? ) ) {  sb . append ( & ) NL } else {  sb . append ( ? ) NL } NL for ( ( k , v ) in params ) {  sb . append ( k ) . append ( = ) . append ( v ) . append ( & ) NL } NL sb . remove ( sb . size - 1 ) NL return sb . toString ( ) NL } catch ( e : Exception ) {  e . printStackTrace ( ) NL } NL return url NL }","func_name":"createUrlFromParams","docstring":"/**\r\n     * The Function is createUrlFromParams\r\n     *\r\n     * @param url of String\r\n     * @param params of LinkedHashMap<String,ArrayList<String>>\r\n     *\r\n     * @return Type of String\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpUtils.cj","path":"okhttp-okcj/src/HttpUtils.cj","code_tokens":"static public func appendHeaders ( builder : okhttp . RequestBuilder , headers : HttpHeaders ) : okhttp . RequestBuilder {  if ( headers . headersMap . isEmpty ( ) ) {  return builder NL } NL return builder NL }","func_name":"appendHeaders","docstring":"/**\r\n     * The Function is appendHeaders\r\n     *\r\n     * @param builder of okhttp.RequestBuilder\r\n     * @param headers of HttpHeaders\r\n     *\r\n     * @return Type of okhttp.RequestBuilder\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"DefaultCachePolicy.cj","path":"okhttp-okcj/src/DefaultCachePolicy.cj","code_tokens":"public func onSuccess ( success : okhttp_okcj . Response ) : Unit {  spawn { mCallback . onSuccess ( success ) NL mCallback . onFinish ( ) NL } NL }","func_name":"onSuccess","docstring":""}
{"repo":"okhttp-okcj","file":"DefaultCachePolicy.cj","path":"okhttp-okcj/src/DefaultCachePolicy.cj","code_tokens":"public func onError ( error : okhttp_okcj . Response ) : Unit {  spawn { mCallback . onError ( error ) NL mCallback . onFinish ( ) NL } NL }","func_name":"onError","docstring":""}
{"repo":"okhttp-okcj","file":"DefaultCachePolicy.cj","path":"okhttp-okcj/src/DefaultCachePolicy.cj","code_tokens":"public func onAnalysisResponse ( call : okhttp . Call , response : okhttp . Response ) : Bool {  if ( response . getCode ( ) != 304 ) {  return false NL } NL  let success : okhttp_okcj . Response = Response . success ( true , cacheEntity . getData ( ) , call , response ) NL spawn { mCallback . onCacheSuccess ( success ) NL mCallback . onFinish ( ) NL } NL return true NL }","func_name":"onAnalysisResponse","docstring":""}
{"repo":"okhttp-okcj","file":"DefaultCachePolicy.cj","path":"okhttp-okcj/src/DefaultCachePolicy.cj","code_tokens":"public func requestSync ( cacheEntity : CacheEntity ) : okhttp_okcj . Response {   var resp : okhttp . Response = rawCall . execute ( ) NL try {  prepareRawCall ( ) NL } catch ( e : Exception ) {  return Response . error ( false , rawCall , resp , e ) NL } NL  var response : okhttp_okcj . Response = requestNetworkSync ( ) NL if ( response . isSuccessful ( ) && response . code ( ) == 304 ) {  response = Response . success ( true , cacheEntity . getData ( ) , rawCall , response . getRawResponse ( ) ) NL } NL return response NL }","func_name":"requestSync","docstring":""}
{"repo":"okhttp-okcj","file":"DefaultCachePolicy.cj","path":"okhttp-okcj/src/DefaultCachePolicy.cj","code_tokens":"public func requestAsync ( cacheEntity : CacheEntity , callback : Callback ) : Unit {  mCallback = callback NL  let resp : okhttp . Response = rawCall . execute ( ) NL spawn { mCallback . onStart ( request ) NL try {  prepareRawCall ( ) NL } catch ( e : Exception ) {   var error : okhttp_okcj . Response = Response . error ( false , rawCall , resp , e ) NL mCallback . onError ( error ) NL return NL } NL requestNetworkAsync ( ) NL } NL }","func_name":"requestAsync","docstring":""}
{"repo":"okhttp-okcj","file":"NoneCacheRequestPolicy.cj","path":"okhttp-okcj/src/NoneCacheRequestPolicy.cj","code_tokens":"public func onSuccess ( success : okhttp_okcj . Response ) : Unit {  spawn { mCallback . onSuccess ( success ) NL mCallback . onFinish ( ) NL } NL }","func_name":"onSuccess","docstring":""}
{"repo":"okhttp-okcj","file":"NoneCacheRequestPolicy.cj","path":"okhttp-okcj/src/NoneCacheRequestPolicy.cj","code_tokens":"public func onError ( error : okhttp_okcj . Response ) : Unit {  spawn { mCallback . onError ( error ) NL mCallback . onFinish ( ) NL } NL }","func_name":"onError","docstring":""}
{"repo":"okhttp-okcj","file":"NoneCacheRequestPolicy.cj","path":"okhttp-okcj/src/NoneCacheRequestPolicy.cj","code_tokens":"public func requestSync ( cacheEntity : CacheEntity ) : okhttp_okcj . Response {   var resp : okhttp . Response = rawCall . execute ( ) NL try {  prepareRawCall ( ) NL } catch ( e : Exception ) {  return Response . error ( false , rawCall , resp , e ) NL } NL  var response : okhttp_okcj . Response = Response . success ( true , cacheEntity . getData ( ) , rawCall , resp ) NL return response NL }","func_name":"requestSync","docstring":""}
{"repo":"okhttp-okcj","file":"NoneCacheRequestPolicy.cj","path":"okhttp-okcj/src/NoneCacheRequestPolicy.cj","code_tokens":"public func requestAsync ( cacheEntity : CacheEntity , callback : Callback ) : Unit {  mCallback = callback NL  let resp : okhttp . Response = rawCall . execute ( ) NL spawn { mCallback . onStart ( request ) NL try {  prepareRawCall ( ) NL } catch ( e : Exception ) {   var error : okhttp_okcj . Response = Response . error ( false , rawCall , resp , e ) NL mCallback . onError ( error ) NL return NL } NL  let success : okhttp_okcj . Response = Response . success ( true , cacheEntity . getData ( ) , rawCall , resp ) NL mCallback . onCacheSuccess ( success ) NL mCallback . onFinish ( ) NL return requestNetworkAsync ( ) NL } NL }","func_name":"requestAsync","docstring":""}
{"repo":"okhttp-okcj","file":"NoneCacheRequestPolicy.cj","path":"okhttp-okcj/src/NoneCacheRequestPolicy.cj","code_tokens":"public func onAnalysisResponse ( call : okhttp . Call , response : okhttp . Response ) : Bool {  return true NL }","func_name":"onAnalysisResponse","docstring":""}
{"repo":"okhttp-okcj","file":"HttpException.cj","path":"okhttp-okcj/src/HttpException.cj","code_tokens":"public func getCode ( ) : Int64 {  return code NL }","func_name":"getCode","docstring":""}
{"repo":"okhttp-okcj","file":"HttpException.cj","path":"okhttp-okcj/src/HttpException.cj","code_tokens":"public func getMessage ( ) : String {  return msg NL }","func_name":"getMessage","docstring":""}
{"repo":"okhttp-okcj","file":"HttpException.cj","path":"okhttp-okcj/src/HttpException.cj","code_tokens":"public func getResponse ( ) : Response {  return response NL }","func_name":"getResponse","docstring":""}
{"repo":"okhttp-okcj","file":"HttpException.cj","path":"okhttp-okcj/src/HttpException.cj","code_tokens":"static public func NET_ERROR ( ) : HttpException {  return HttpException ( network error! http response code is 404 or 5xx! ) NL }","func_name":"NET_ERROR","docstring":""}
{"repo":"okhttp-okcj","file":"HttpException.cj","path":"okhttp-okcj/src/HttpException.cj","code_tokens":"static public func COMMON ( message : String ) : HttpException {  return HttpException ( message ) NL }","func_name":"COMMON","docstring":""}
{"repo":"okhttp-okcj","file":"HeaderParser.cj","path":"okhttp-okcj/src/HeaderParser.cj","code_tokens":"static public func addCacheHeaders ( request : okhttp_okcj . Request , cacheEntity : CacheEntity , cacheMode : CacheMode ) : Unit {  if ( cacheMode == CacheMode . DEFAULT ) {   var responseHeaders : HttpHeaders = cacheEntity . getResponseHeaders ( ) NL  var eTag : String = responseHeaders . get ( HttpHeaders . HEAD_KEY_E_TAG ) . getOrThrow ( ) NL if ( ! ( eTag . isEmpty ( ) ) ) {  request . getHeaders ( HttpHeaders . HEAD_KEY_IF_NONE_MATCH , eTag ) NL } NL } NL }","func_name":"addCacheHeaders","docstring":""}
{"repo":"okhttp-okcj","file":"HeaderParser.cj","path":"okhttp-okcj/src/HeaderParser.cj","code_tokens":"static public func createCacheEntity ( responseHeaders : Header , data : String , cacheMode : CacheMode , cacheKey : String ) : CacheEntity {   let localExpire : Int64 = 0 NL if ( cacheMode == CacheMode . DEFAULT ) {   var cacheControl : String = HttpHeaders . getCacheControl ( responseHeaders . get ( HttpHeaders . HEAD_KEY_CACHE_CONTROL ) . getOrThrow ( ) , responseHeaders . get ( HttpHeaders . HEAD_KEY_PRAGMA ) . getOrThrow ( ) ) NL } NL  var cacheEntity : CacheEntity = CacheEntity ( ) NL cacheEntity . setKey ( cacheKey ) NL cacheEntity . setData ( data ) NL cacheEntity . setLocalExpire ( localExpire ) NL return cacheEntity NL }","func_name":"createCacheEntity","docstring":""}
{"repo":"okhttp-okcj","file":"HeadRequest.cj","path":"okhttp-okcj/src/HeadRequest.cj","code_tokens":"public func getMethod ( ) : HttpMethod {  return HttpMethod . HEAD NL }","func_name":"getMethod","docstring":"/**\n     * The Function is getMethod\n     *\n     * @return Type of HttpMethod\n     * @since 0.30.4\n     */"}
{"repo":"okhttp-okcj","file":"DefaultCallAdapter.cj","path":"okhttp-okcj/src/DefaultCallAdapter.cj","code_tokens":"public func adapt ( call : Call , param : AdapterParam ) : Call {  return call NL }","func_name":"adapt","docstring":""}
{"repo":"okhttp-okcj","file":"HttpMethod.cj","path":"okhttp-okcj/src/HttpMethod.cj","code_tokens":"public operator func == ( that : HttpMethod ) : Bool {  match ( ( this , that ) ) { case ( GET , GET ) => true NL case ( POST , POST ) => true NL case ( PUT , PUT ) => true NL case ( DELETE , DELETE ) => true NL case ( HEAD , HEAD ) => true NL case ( PATCH , PATCH ) => true NL case ( OPTIONS , OPTIONS ) => true NL case ( TRACE , TRACE ) => true NL case _ => false NL } NL }","func_name":"==","docstring":""}
{"repo":"okhttp-okcj","file":"HttpMethod.cj","path":"okhttp-okcj/src/HttpMethod.cj","code_tokens":"public operator func != ( that : HttpMethod ) : Bool {  return ! ( this == that ) NL }","func_name":"!=","docstring":""}
{"repo":"okhttp-okcj","file":"HttpMethod.cj","path":"okhttp-okcj/src/HttpMethod.cj","code_tokens":"public func toString ( ) : String {  return match ( this ) { case GET => GET NL case POST => POST NL case PUT => PUT NL case DELETE => DELETE NL case HEAD => HEAD NL case PATCH => PATCH NL case OPTIONS => OPTIONS NL case TRACE => TRACE NL } NL }","func_name":"toString","docstring":""}
{"repo":"okhttp-okcj","file":"BaseImpl.cj","path":"okhttp-okcj/src/BaseImpl.cj","code_tokens":"public func prepareRawCall ( ) : okhttp . Call {   let client = okhttp . OkHttpClient . builder ( ) . build ( ) NL  let originalRequest = okhttp . Request . builder ( ) . build ( ) NL  let realcall = okhttp . RealCall . newRealCall ( client , originalRequest , false ) NL return realcall . clone ( ) NL }","func_name":"prepareRawCall","docstring":""}
{"repo":"okhttp-okcj","file":"BaseImpl.cj","path":"okhttp-okcj/src/BaseImpl.cj","code_tokens":"public func onSuccess ( success : Response ) : Unit {  }","func_name":"onSuccess","docstring":""}
{"repo":"okhttp-okcj","file":"BaseImpl.cj","path":"okhttp-okcj/src/BaseImpl.cj","code_tokens":"public func onError ( error : Response ) : Unit {  }","func_name":"onError","docstring":""}
{"repo":"okhttp-okcj","file":"BaseImpl.cj","path":"okhttp-okcj/src/BaseImpl.cj","code_tokens":"public func onAnalysisResponse ( call : okhttp . Call , response : okhttp . Response ) : Bool {  return false NL }","func_name":"onAnalysisResponse","docstring":""}
{"repo":"okhttp-okcj","file":"BaseImpl.cj","path":"okhttp-okcj/src/BaseImpl.cj","code_tokens":"public func requestSync ( cacheEntity : CacheEntity ) : okhttp_okcj . Response {  return okhttp_okcj . Response ( ) NL }","func_name":"requestSync","docstring":""}
{"repo":"okhttp-okcj","file":"BaseImpl.cj","path":"okhttp-okcj/src/BaseImpl.cj","code_tokens":"public func prepareCache ( ) : CacheEntity {  return CacheEntity ( ) NL }","func_name":"prepareCache","docstring":""}
{"repo":"okhttp-okcj","file":"BaseImpl.cj","path":"okhttp-okcj/src/BaseImpl.cj","code_tokens":"public func requestAsync ( cacheEntity : CacheEntity , callback : okhttp_okcj . Callback ) : Unit {  }","func_name":"requestAsync","docstring":""}
{"repo":"okhttp-okcj","file":"BaseImpl.cj","path":"okhttp-okcj/src/BaseImpl.cj","code_tokens":"public func isExecuted ( ) : Bool {  return false NL }","func_name":"isExecuted","docstring":""}
{"repo":"okhttp-okcj","file":"BaseImpl.cj","path":"okhttp-okcj/src/BaseImpl.cj","code_tokens":"public func cancel ( ) : Unit {  }","func_name":"cancel","docstring":""}
{"repo":"okhttp-okcj","file":"BaseImpl.cj","path":"okhttp-okcj/src/BaseImpl.cj","code_tokens":"public func isCanceled ( ) : Bool {  return false NL }","func_name":"isCanceled","docstring":""}
{"repo":"okhttp-okcj","file":"BaseImpl.cj","path":"okhttp-okcj/src/BaseImpl.cj","code_tokens":"public func execute ( ) : okhttp_okcj . Response {  return okhttp_okcj . Response ( ) NL }","func_name":"execute","docstring":""}
{"repo":"okhttp-okcj","file":"BaseImpl.cj","path":"okhttp-okcj/src/BaseImpl.cj","code_tokens":"public func execute ( callback : okhttp_okcj . Callback ) : Unit {  }","func_name":"execute","docstring":""}
{"repo":"okhttp-okcj","file":"BaseImpl.cj","path":"okhttp-okcj/src/BaseImpl.cj","code_tokens":"public func isExecuted ( ) : Bool {  return false NL }","func_name":"isExecuted","docstring":""}
{"repo":"okhttp-okcj","file":"BaseImpl.cj","path":"okhttp-okcj/src/BaseImpl.cj","code_tokens":"public func cancel ( ) : Unit {  }","func_name":"cancel","docstring":""}
{"repo":"okhttp-okcj","file":"BaseImpl.cj","path":"okhttp-okcj/src/BaseImpl.cj","code_tokens":"public func isCanceled ( ) : Bool {  return false NL }","func_name":"isCanceled","docstring":""}
{"repo":"okhttp-okcj","file":"BaseImpl.cj","path":"okhttp-okcj/src/BaseImpl.cj","code_tokens":"public func clone ( ) : okhttp_okcj . Call {  return BaseCall ( ) NL }","func_name":"clone","docstring":""}
{"repo":"okhttp-okcj","file":"HttpParams.cj","path":"okhttp-okcj/src/HttpParams.cj","code_tokens":"public func put ( params : HttpParams ) : Unit {  if ( ! ( params . urlParamsMap . isEmpty ( ) ) ) {  urlParamsMap . putAll ( params . urlParamsMap ) NL } NL if ( ! ( params . fileParamsMap . isEmpty ( ) ) ) {  fileParamsMap . putAll ( params . fileParamsMap ) NL } NL }","func_name":"put","docstring":"/**\r\n     * The Function is put\r\n     *\r\n     * @param params of HttpParams\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpParams.cj","path":"okhttp-okcj/src/HttpParams.cj","code_tokens":"public func put ( key : String , file : FileInfo ) : Unit {   var filePath : String = file . getCanonicalPath ( ) NL  let con : Option < Int64 > = filePath . lastIndexOf ( / ) NL  var lastSlash : Int64 = 0 NL match ( con ) { case Some ( v ) => lastSlash = v NL case None => ( ) NL } NL  let fileName : String = filePath . substring ( lastSlash + 1 ) NL put ( key , file , fileName ) NL }","func_name":"put","docstring":"/**\r\n     * The Function is put\r\n     *\r\n     * @param params of HttpParams\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpParams.cj","path":"okhttp-okcj/src/HttpParams.cj","code_tokens":"public func put ( key : String , file : FileInfo , fileName : String ) : Unit {  put ( key , file , fileName , HttpUtils . guessMimeType ( fileName ) ) NL }","func_name":"put","docstring":"/**\r\n     * The Function is put\r\n     *\r\n     * @param params of HttpParams\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpParams.cj","path":"okhttp-okcj/src/HttpParams.cj","code_tokens":"public func put ( key : String , fileWrapper : FileWrapper ) : Unit {  if ( ! ( key . isEmpty ( ) ) ) {  put ( key , fileWrapper . file , fileWrapper . fileName , fileWrapper . contentType ) NL } NL }","func_name":"put","docstring":"/**\r\n     * The Function is put\r\n     *\r\n     * @param params of HttpParams\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpParams.cj","path":"okhttp-okcj/src/HttpParams.cj","code_tokens":"public func put ( key : String , file : FileInfo , fileName : String , contentType : String ) : Unit {  if ( ! ( key . isEmpty ( ) ) ) {   var fileWrappers : Option < ArrayList < FileWrapper > > = fileParamsMap . get ( key ) NL  let result = ArrayList < FileWrapper > ( ) NL  let s : Any = match ( fileWrappers ) { case Some ( v ) => ( ) NL case None => fileParamsMap . put ( key , result ) NL } NL result . append ( FileWrapper ( file , fileName , contentType ) ) NL } NL }","func_name":"put","docstring":"/**\r\n     * The Function is put\r\n     *\r\n     * @param params of HttpParams\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpParams.cj","path":"okhttp-okcj/src/HttpParams.cj","code_tokens":"public func put ( key : String , value : String ) : Unit {  if ( ! ( key . isEmpty ( ) ) && ! ( value . isEmpty ( ) ) ) {   var urlValues : Option < ArrayList < String > > = urlParamsMap . get ( key ) NL  let result = ArrayList < String > ( ) NL  let s : Any = match ( urlValues ) { case Some ( v ) => ( ) NL case None => urlParamsMap . put ( key , result ) NL } NL result . append ( value ) NL } NL }","func_name":"put","docstring":"/**\r\n     * The Function is put\r\n     *\r\n     * @param params of HttpParams\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpParams.cj","path":"okhttp-okcj/src/HttpParams.cj","code_tokens":"public func putFileParams ( key : String , files : ArrayList < FileInfo > ) : Unit {  if ( ! ( key . isEmpty ( ) ) && ! ( files . isEmpty ( ) ) ) {  for ( file in files ) {  put ( key , file ) NL } NL } NL }","func_name":"putFileParams","docstring":"/**\r\n     * The Function is putFileParams\r\n     *\r\n     * @param key of String\r\n     * @param files of ArrayList<FileInfo>\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpParams.cj","path":"okhttp-okcj/src/HttpParams.cj","code_tokens":"public func putFileWrapperParams ( key : String , fileWrappers : ArrayList < FileWrapper > ) : Unit {  if ( ! ( key . isEmpty ( ) ) && ! ( fileWrappers . isEmpty ( ) ) ) {  for ( fileWrapper in fileWrappers ) {  put ( key , fileWrapper ) NL } NL } NL }","func_name":"putFileWrapperParams","docstring":"/**\r\n     * The Function is putFileWrapperParams\r\n     *\r\n     * @param key of String\r\n     * @param fileWrappers of ArrayList<FileWrapper>\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpParams.cj","path":"okhttp-okcj/src/HttpParams.cj","code_tokens":"public func putUrlParams ( key : String , values : ArrayList < String > ) : Unit {  if ( ! ( key . isEmpty ( ) ) && ! ( values . isEmpty ( ) ) ) {  for ( value in values ) {  put ( key , value ) NL } NL } NL }","func_name":"putUrlParams","docstring":"/**\r\n     * The Function is putUrlParams\r\n     *\r\n     * @param key of String\r\n     * @param values of ArrayList<String>\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpParams.cj","path":"okhttp-okcj/src/HttpParams.cj","code_tokens":"public func removeUrl ( key : String ) : Unit {  urlParamsMap . remove ( key ) NL }","func_name":"removeUrl","docstring":"/**\r\n     * The Function is removeUrl\r\n     *\r\n     * @param key of String\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpParams.cj","path":"okhttp-okcj/src/HttpParams.cj","code_tokens":"public func removeFile ( key : String ) : Unit {  fileParamsMap . remove ( key ) NL }","func_name":"removeFile","docstring":"/**\r\n     * The Function is removeFile\r\n     *\r\n     * @param key of String\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpParams.cj","path":"okhttp-okcj/src/HttpParams.cj","code_tokens":"public func remove ( key : String ) : Unit {  removeUrl ( key ) NL removeFile ( key ) NL }","func_name":"remove","docstring":"/**\r\n     * The Function is remove\r\n     *\r\n     * @param key of String\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpParams.cj","path":"okhttp-okcj/src/HttpParams.cj","code_tokens":"public func clear ( ) : Unit {  urlParamsMap . clear ( ) NL fileParamsMap . clear ( ) NL }","func_name":"clear","docstring":"/**\r\n     * The Function is clear\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"HttpParams.cj","path":"okhttp-okcj/src/HttpParams.cj","code_tokens":"public func toString ( ) : String {  return FileWrapper{ + , fileName= + fileName + , contentType= + contentType + } NL }","func_name":"toString","docstring":"/**\r\n     * The Function is toString\r\n     *\r\n     * @return Type of String\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"OkCj.cj","path":"okhttp-okcj/src/OkCj.cj","code_tokens":"static public func getInstance ( ) : OkCj {   var okCjHolder : OkCjHolder = OkCjHolder ( ) NL return okCjHolder . holder NL }","func_name":"getInstance","docstring":"/**\r\n     * The Function is getInstance\r\n     *\r\n     * @return Type of OkCj\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"OkCj.cj","path":"okhttp-okcj/src/OkCj.cj","code_tokens":"public func setCacheMode ( cacheMode : CacheMode ) {  mCacheMode = cacheMode NL return this NL }","func_name":"setCacheMode","docstring":"/**\r\n     * The Function is setCacheMode\r\n     *\r\n     * @param cacheMode of CacheMode\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"OkCj.cj","path":"okhttp-okcj/src/OkCj.cj","code_tokens":"public func getCacheMode ( ) {  return mCacheMode NL }","func_name":"getCacheMode","docstring":"/**\r\n     * The Function is getCacheMode\r\n     *\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"OkCj.cj","path":"okhttp-okcj/src/OkCj.cj","code_tokens":"public func getCommonParams ( ) : HttpParams {  return mCommonParams NL }","func_name":"getCommonParams","docstring":"/**\r\n     * The Function is getCommonParams\r\n     *\r\n     * @return Type of HttpParams\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"OkCj.cj","path":"okhttp-okcj/src/OkCj.cj","code_tokens":"public func getCommonHeaders ( ) : HttpHeaders {  return mCommonHeaders NL }","func_name":"getCommonHeaders","docstring":"/**\r\n     * The Function is getCommonHeaders\r\n     *\r\n     * @return Type of HttpHeaders\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"OkCj.cj","path":"okhttp-okcj/src/OkCj.cj","code_tokens":"public func getRetryCount ( ) : Int64 {  return mRetryCount NL }","func_name":"getRetryCount","docstring":"/**\r\n     * The Function is getRetryCount\r\n     *\r\n     * @return Type of Int64\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"OkCj.cj","path":"okhttp-okcj/src/OkCj.cj","code_tokens":"public func getCacheTime ( ) : Int64 {  return mCacheTime NL }","func_name":"getCacheTime","docstring":"/**\r\n     * The Function is getCacheTime\r\n     *\r\n     * @return Type of Int64\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"OkCj.cj","path":"okhttp-okcj/src/OkCj.cj","code_tokens":"public func getOkHttpClient ( ) : okhttp . OkHttpClient {  return okHttpClient NL }","func_name":"getOkHttpClient","docstring":"/**\r\n     * The Function is getOkHttpClient\r\n     *\r\n     * @return Type of okhttp.OkHttpClient\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"OkCj.cj","path":"okhttp-okcj/src/OkCj.cj","code_tokens":"public func setOkHttpClient ( okHttpClient : okhttp . OkHttpClient ) : OkCj {  this . okHttpClient = okHttpClient NL return this NL }","func_name":"setOkHttpClient","docstring":""}
{"repo":"okhttp-okcj","file":"ProgressRequestBody.cj","path":"okhttp-okcj/src/ProgressRequestBody.cj","code_tokens":"public func contentType ( ) : String {  return requestBody . contentType ( ) NL }","func_name":"contentType","docstring":"/**\r\n     * The Function is contentType\r\n     *\r\n     * @return Type of String\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"ProgressRequestBody.cj","path":"okhttp-okcj/src/ProgressRequestBody.cj","code_tokens":"public func contentLength ( ) : Int64 {  try {  return requestBody . contentLength ( ) NL } catch ( e : IOException ) {  e . printStackTrace ( ) NL return - 1 NL } NL }","func_name":"contentLength","docstring":"/**\r\n     * The Function is contentLength\r\n     *\r\n     * @return Type of Int64\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"ProgressRequestBody.cj","path":"okhttp-okcj/src/ProgressRequestBody.cj","code_tokens":"private func onProgress ( progress : Progress ) : Unit {  }","func_name":"onProgress","docstring":""}
{"repo":"okhttp-okcj","file":"ProgressRequestBody.cj","path":"okhttp-okcj/src/ProgressRequestBody.cj","code_tokens":"public func setInterceptor ( interceptor : UploadInterceptor ) {  this . interceptor = interceptor NL }","func_name":"setInterceptor","docstring":"/**\r\n     * The Function is setInterceptor\r\n     *\r\n     * @param interceptor of UploadInterceptor\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"ProgressRequestBody.cj","path":"okhttp-okcj/src/ProgressRequestBody.cj","code_tokens":"public func uploadProgress ( progress : Progress ) : Unit {  }","func_name":"uploadProgress","docstring":""}
{"repo":"okhttp-okcj","file":"Call.cj","path":"okhttp-okcj/src/Call.cj","code_tokens":"func execute ( ) : Response","func_name":"execute","docstring":""}
{"repo":"okhttp-okcj","file":"Call.cj","path":"okhttp-okcj/src/Call.cj","code_tokens":"func execute ( callback : Callback ) : Unit","func_name":"execute","docstring":""}
{"repo":"okhttp-okcj","file":"Call.cj","path":"okhttp-okcj/src/Call.cj","code_tokens":"func isExecuted ( ) : Bool","func_name":"isExecuted","docstring":""}
{"repo":"okhttp-okcj","file":"Call.cj","path":"okhttp-okcj/src/Call.cj","code_tokens":"func cancel ( ) : Unit","func_name":"cancel","docstring":""}
{"repo":"okhttp-okcj","file":"Call.cj","path":"okhttp-okcj/src/Call.cj","code_tokens":"func isCanceled ( ) : Bool","func_name":"isCanceled","docstring":""}
{"repo":"okhttp-okcj","file":"Call.cj","path":"okhttp-okcj/src/Call.cj","code_tokens":"func clone ( ) : Call","func_name":"clone","docstring":""}
{"repo":"okhttp-okcj","file":"FileCallback.cj","path":"okhttp-okcj/src/FileCallback.cj","code_tokens":"public func onError ( response : Response ) : Unit {  }","func_name":"onError","docstring":""}
{"repo":"okhttp-okcj","file":"FileCallback.cj","path":"okhttp-okcj/src/FileCallback.cj","code_tokens":"public func onSuccess ( response : Response ) : Unit {  }","func_name":"onSuccess","docstring":""}
{"repo":"okhttp-okcj","file":"FileCallback.cj","path":"okhttp-okcj/src/FileCallback.cj","code_tokens":"public func convertResponse ( response : okhttp . Response ) : String {   var bytes : Array < Byte > = Array < Byte > ( ) NL  let f : File = convert . convertResponse ( response ) NL response . close ( ) NL f . read ( bytes ) NL return bytes . toString ( ) NL }","func_name":"convertResponse","docstring":""}
{"repo":"okhttp-okcj","file":"PatchRequest.cj","path":"okhttp-okcj/src/PatchRequest.cj","code_tokens":"public func getMethod ( ) : HttpMethod {  return HttpMethod . PATCH NL }","func_name":"getMethod","docstring":"/**\n     * The Function is getMethod\n     *\n     * @return Type of HttpMethod\n     * @since 0.30.4\n     */"}
{"repo":"okhttp-okcj","file":"CachePolicy.cj","path":"okhttp-okcj/src/CachePolicy.cj","code_tokens":"func onSuccess ( success : Response ) : Unit","func_name":"onSuccess","docstring":""}
{"repo":"okhttp-okcj","file":"CachePolicy.cj","path":"okhttp-okcj/src/CachePolicy.cj","code_tokens":"func onError ( error : Response ) : Unit","func_name":"onError","docstring":""}
{"repo":"okhttp-okcj","file":"CachePolicy.cj","path":"okhttp-okcj/src/CachePolicy.cj","code_tokens":"func onAnalysisResponse ( call : okhttp . Call , response : okhttp . Response ) : Bool","func_name":"onAnalysisResponse","docstring":""}
{"repo":"okhttp-okcj","file":"CachePolicy.cj","path":"okhttp-okcj/src/CachePolicy.cj","code_tokens":"func prepareCache ( ) : CacheEntity","func_name":"prepareCache","docstring":""}
{"repo":"okhttp-okcj","file":"CachePolicy.cj","path":"okhttp-okcj/src/CachePolicy.cj","code_tokens":"func prepareRawCall ( ) : okhttp . Call","func_name":"prepareRawCall","docstring":""}
{"repo":"okhttp-okcj","file":"CachePolicy.cj","path":"okhttp-okcj/src/CachePolicy.cj","code_tokens":"func requestSync ( cacheEntity : CacheEntity ) : Response","func_name":"requestSync","docstring":""}
{"repo":"okhttp-okcj","file":"CachePolicy.cj","path":"okhttp-okcj/src/CachePolicy.cj","code_tokens":"func requestAsync ( cacheEntity : CacheEntity , callback : Callback ) : Unit","func_name":"requestAsync","docstring":""}
{"repo":"okhttp-okcj","file":"CachePolicy.cj","path":"okhttp-okcj/src/CachePolicy.cj","code_tokens":"func isExecuted ( ) : Bool","func_name":"isExecuted","docstring":""}
{"repo":"okhttp-okcj","file":"CachePolicy.cj","path":"okhttp-okcj/src/CachePolicy.cj","code_tokens":"func cancel ( ) : Unit","func_name":"cancel","docstring":""}
{"repo":"okhttp-okcj","file":"CachePolicy.cj","path":"okhttp-okcj/src/CachePolicy.cj","code_tokens":"func isCanceled ( ) : Bool","func_name":"isCanceled","docstring":""}
{"repo":"okhttp-okcj","file":"Progress.cj","path":"okhttp-okcj/src/Progress.cj","code_tokens":"static public func changeProgress ( progress : Progress , writeSize : Int64 , action : Action ) : Progress {  return changeProgress ( progress , writeSize , progress . totalSize , action ) NL }","func_name":"changeProgress","docstring":""}
{"repo":"okhttp-okcj","file":"Progress.cj","path":"okhttp-okcj/src/Progress.cj","code_tokens":"static public func changeProgress ( progress : Progress , writeSize : Int64 , totalSize : Int64 , action : Action ) : Progress {  progress . totalSize = totalSize NL progress . currentSize = progress . currentSize + writeSize NL progress . tempSize = progress . tempSize + writeSize NL return progress NL }","func_name":"changeProgress","docstring":""}
{"repo":"okhttp-okcj","file":"Progress.cj","path":"okhttp-okcj/src/Progress.cj","code_tokens":"public func call ( progress : Progress ) : Unit {  }","func_name":"call","docstring":""}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func Multipart ( isMultipart : Bool ) : Request {  this . isMultipart = isMultipart NL return this NL }","func_name":"Multipart","docstring":"/**\r\n     * The Function is Multipart\r\n     *\r\n     * @param isMultipart of Bool\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func SpliceUrl ( isSpliceUrl : Bool ) : Request {  this . isSpliceUrl = isSpliceUrl NL return this NL }","func_name":"SpliceUrl","docstring":"/**\r\n     * The Function is SpliceUrl\r\n     *\r\n     * @param isSpliceUrl of Bool\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func setParams ( key : String , file : FileInfo ) : Request {  params . put ( key , file ) NL return this NL }","func_name":"setParams","docstring":"/**\r\n     * The Function is setParams\r\n     *\r\n     * @param key of String\r\n     * @param file of FileInfo\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func addFileParams ( key : String , files : ArrayList < FileInfo > ) : Request {  params . putFileParams ( key , files ) NL return this NL }","func_name":"addFileParams","docstring":"/**\r\n     * The Function is addFileParams\r\n     *\r\n     * @param key of String\r\n     * @param files of ArrayList<FileInfo>\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func addFileWrapperParams ( key : String , fileWrappers : ArrayList < FileWrapper > ) : Request {  params . putFileWrapperParams ( key , fileWrappers ) NL return this NL }","func_name":"addFileWrapperParams","docstring":"/**\r\n     * The Function is addFileWrapperParams\r\n     *\r\n     * @param key of String\r\n     * @param fileWrappers of ArrayList<FileWrapper>\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func setParams ( key : String , file : FileInfo , fileName : String ) : Request {  params . put ( key , file , fileName ) NL return this NL }","func_name":"setParams","docstring":"/**\r\n     * The Function is setParams\r\n     *\r\n     * @param key of String\r\n     * @param file of FileInfo\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func setParams ( key : String , file : FileInfo , fileName : String , contentType : String ) : Request {  params . put ( key , file , fileName , contentType ) NL return this NL }","func_name":"setParams","docstring":"/**\r\n     * The Function is setParams\r\n     *\r\n     * @param key of String\r\n     * @param file of FileInfo\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func upRequestBody ( requestBody : okhttp . RequestBody ) : Request {  this . requestBody = requestBody NL return this NL }","func_name":"upRequestBody","docstring":"/**\r\n     * The Function is upRequestBody\r\n     *\r\n     * @param requestBody of okhttp.RequestBody\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func upString ( str : String ) : Request {  this . content = str NL this . mediaType = HttpParams . MEDIA_TYPE_PLAIN NL return this NL }","func_name":"upString","docstring":"/**\r\n     * The Function is upString\r\n     *\r\n     * @param str of String\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func upString ( str : String , mediaType : String ) : Request {  this . content = str NL this . mediaType = mediaType NL return this NL }","func_name":"upString","docstring":"/**\r\n     * The Function is upString\r\n     *\r\n     * @param str of String\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func upJson ( json : String ) : Request {  this . content = json NL this . mediaType = HttpParams . MEDIA_TYPE_JSON NL return this NL }","func_name":"upJson","docstring":"/**\r\n     * The Function is upJson\r\n     *\r\n     * @param json of String\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func upJson ( jsonObject : JsonObject ) : Request {  this . content = jsonObject . toString ( ) NL this . mediaType = HttpParams . MEDIA_TYPE_JSON NL return this NL }","func_name":"upJson","docstring":"/**\r\n     * The Function is upJson\r\n     *\r\n     * @param json of String\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func upJson ( jsonArray : JsonArray ) : Request {  this . content = jsonArray . toString ( ) NL this . mediaType = HttpParams . MEDIA_TYPE_JSON NL return this NL }","func_name":"upJson","docstring":"/**\r\n     * The Function is upJson\r\n     *\r\n     * @param json of String\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func upBytes ( bs : Array < Byte > ) : Request {  this . bs = bs NL this . mediaType = HttpParams . MEDIA_TYPE_STREAM NL return this NL }","func_name":"upBytes","docstring":"/**\r\n     * The Function is upBytes\r\n     *\r\n     * @param bs of Array<Byte>\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func upBytes ( bs : Array < Byte > , mediaType : String ) : Request {  this . bs = bs NL this . mediaType = mediaType NL return this NL }","func_name":"upBytes","docstring":"/**\r\n     * The Function is upBytes\r\n     *\r\n     * @param bs of Array<Byte>\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func upFile ( file : FileInfo ) : Request {  this . file = file NL  var filePath : String = file . getCanonicalPath ( ) NL  let con : Option < Int64 > = filePath . lastIndexOf ( / ) NL  var lastSlash : Int64 = 0 NL match ( con ) { case Some ( v ) => lastSlash = v NL case None => ( ) NL } NL  let fileName : String = filePath . substring ( lastSlash + 1 ) NL this . mediaType = HttpUtils . guessMimeType ( fileName ) NL return this NL }","func_name":"upFile","docstring":"/**\r\n     * The Function is upFile\r\n     *\r\n     * @param file of FileInfo\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func upFile ( file : FileInfo , mediaType : String ) : Request {  this . file = file NL this . mediaType = mediaType NL return this NL }","func_name":"upFile","docstring":"/**\r\n     * The Function is upFile\r\n     *\r\n     * @param file of FileInfo\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"BodyRequest.cj","path":"okhttp-okcj/src/BodyRequest.cj","code_tokens":"public func generateRequestBuilder ( requestBody : okhttp . RequestBody ) : okhttp . RequestBuilder {  try {  getHeaders ( HttpHeaders . HEAD_KEY_CONTENT_LENGTH , ${requestBody.contentLength()} ) NL ( ) NL } catch ( e : IOException ) {  e . printStackTrace ( ) NL } NL  var requestBuilder : okhttp . RequestBuilder = okhttp . Request . builder ( ) NL return HttpUtils . appendHeaders ( requestBuilder , headers ) NL }","func_name":"generateRequestBuilder","docstring":""}
{"repo":"okhttp-okcj","file":"CacheEntity.cj","path":"okhttp-okcj/src/CacheEntity.cj","code_tokens":"public func getResponseHeaders ( ) : HttpHeaders {  return responseHeaders NL }","func_name":"getResponseHeaders","docstring":""}
{"repo":"okhttp-okcj","file":"CacheEntity.cj","path":"okhttp-okcj/src/CacheEntity.cj","code_tokens":"public func setExpire ( expire : Bool ) : Unit {  isExpire = expire NL }","func_name":"setExpire","docstring":""}
{"repo":"okhttp-okcj","file":"CacheEntity.cj","path":"okhttp-okcj/src/CacheEntity.cj","code_tokens":"public func setKey ( key : String ) : Unit {  this . key = key NL }","func_name":"setKey","docstring":""}
{"repo":"okhttp-okcj","file":"CacheEntity.cj","path":"okhttp-okcj/src/CacheEntity.cj","code_tokens":"public func setData ( data : String ) : Unit {  this . data = data NL }","func_name":"setData","docstring":""}
{"repo":"okhttp-okcj","file":"CacheEntity.cj","path":"okhttp-okcj/src/CacheEntity.cj","code_tokens":"public func getData ( ) : String {  return data NL }","func_name":"getData","docstring":""}
{"repo":"okhttp-okcj","file":"CacheEntity.cj","path":"okhttp-okcj/src/CacheEntity.cj","code_tokens":"public func setLocalExpire ( localExpire : Int64 ) : Unit {  this . localExpire = localExpire NL }","func_name":"setLocalExpire","docstring":""}
{"repo":"okhttp-okcj","file":"CacheEntity.cj","path":"okhttp-okcj/src/CacheEntity.cj","code_tokens":"public func setResponseHeaders ( responseHeaders : HttpHeaders ) : Unit {  this . responseHeaders = responseHeaders NL }","func_name":"setResponseHeaders","docstring":""}
{"repo":"okhttp-okcj","file":"FirstCachePolicy.cj","path":"okhttp-okcj/src/FirstCachePolicy.cj","code_tokens":"public func onSuccess ( success : okhttp_okcj . Response ) : Unit {  spawn { mCallback . onSuccess ( success ) NL mCallback . onFinish ( ) NL } NL }","func_name":"onSuccess","docstring":""}
{"repo":"okhttp-okcj","file":"FirstCachePolicy.cj","path":"okhttp-okcj/src/FirstCachePolicy.cj","code_tokens":"public func onError ( error : okhttp_okcj . Response ) : Unit {  spawn { mCallback . onError ( error ) NL mCallback . onFinish ( ) NL } NL }","func_name":"onError","docstring":""}
{"repo":"okhttp-okcj","file":"FirstCachePolicy.cj","path":"okhttp-okcj/src/FirstCachePolicy.cj","code_tokens":"public func requestSync ( cacheEntity : CacheEntity ) : okhttp_okcj . Response {   var resp : okhttp . Response = rawCall . execute ( ) NL try {  prepareRawCall ( ) NL } catch ( e : Exception ) {  return Response . error ( false , rawCall , resp , e ) NL } NL  var response : okhttp_okcj . Response = requestNetworkSync ( ) NL if ( ! ( response . isSuccessful ( ) ) ) {  response = Response . success ( true , cacheEntity . getData ( ) , rawCall , response . getRawResponse ( ) ) NL } NL return response NL }","func_name":"requestSync","docstring":""}
{"repo":"okhttp-okcj","file":"FirstCachePolicy.cj","path":"okhttp-okcj/src/FirstCachePolicy.cj","code_tokens":"public func requestAsync ( cacheEntity : CacheEntity , callback : Callback ) : Unit {  mCallback = callback NL  let resp : okhttp . Response = rawCall . execute ( ) NL spawn { mCallback . onStart ( request ) NL try {  prepareRawCall ( ) NL } catch ( e : Exception ) {   var error : okhttp_okcj . Response = Response . error ( false , rawCall , resp , e ) NL mCallback . onError ( error ) NL return NL } NL  var success : okhttp_okcj . Response = Response . success ( true , cacheEntity . getData ( ) , rawCall , resp ) NL mCallback . onCacheSuccess ( success ) NL requestNetworkAsync ( ) NL } NL }","func_name":"requestAsync","docstring":""}
{"repo":"okhttp-okcj","file":"FirstCachePolicy.cj","path":"okhttp-okcj/src/FirstCachePolicy.cj","code_tokens":"public func onAnalysisResponse ( call : okhttp . Call , response : okhttp . Response ) : Bool {  return true NL }","func_name":"onAnalysisResponse","docstring":""}
{"repo":"okhttp-okcj","file":"AbsCallback.cj","path":"okhttp-okcj/src/AbsCallback.cj","code_tokens":"public open func onStart ( request : Request ) : Unit {  }","func_name":"onStart","docstring":""}
{"repo":"okhttp-okcj","file":"AbsCallback.cj","path":"okhttp-okcj/src/AbsCallback.cj","code_tokens":"public open func downloadProgress ( progress : Progress ) : Unit {  }","func_name":"downloadProgress","docstring":""}
{"repo":"okhttp-okcj","file":"AbsCallback.cj","path":"okhttp-okcj/src/AbsCallback.cj","code_tokens":"public open func uploadProgress ( progress : Progress ) : Unit {  }","func_name":"uploadProgress","docstring":""}
{"repo":"okhttp-okcj","file":"AbsCallback.cj","path":"okhttp-okcj/src/AbsCallback.cj","code_tokens":"public open func onFinish ( ) : Unit {  }","func_name":"onFinish","docstring":""}
{"repo":"okhttp-okcj","file":"AbsCallback.cj","path":"okhttp-okcj/src/AbsCallback.cj","code_tokens":"public open func onCacheSuccess ( response : Response ) : Unit {  }","func_name":"onCacheSuccess","docstring":""}
{"repo":"okhttp-okcj","file":"StringConvert.cj","path":"okhttp-okcj/src/StringConvert.cj","code_tokens":"public func convertResponse ( response : okhttp . Response ) : String {   let opt = response . getBody ( ) NL match ( opt ) { case Some ( v ) => v . getContentType ( ) NL case _ =>  NL } NL }","func_name":"convertResponse","docstring":""}
{"repo":"okhttp-okcj","file":"Callback.cj","path":"okhttp-okcj/src/Callback.cj","code_tokens":"func onStart ( request : Request ) : Unit","func_name":"onStart","docstring":""}
{"repo":"okhttp-okcj","file":"Callback.cj","path":"okhttp-okcj/src/Callback.cj","code_tokens":"func onSuccess ( response : Response ) : Unit","func_name":"onSuccess","docstring":""}
{"repo":"okhttp-okcj","file":"Callback.cj","path":"okhttp-okcj/src/Callback.cj","code_tokens":"func onCacheSuccess ( response : Response ) : Unit","func_name":"onCacheSuccess","docstring":""}
{"repo":"okhttp-okcj","file":"Callback.cj","path":"okhttp-okcj/src/Callback.cj","code_tokens":"func onError ( response : Response ) : Unit","func_name":"onError","docstring":""}
{"repo":"okhttp-okcj","file":"Callback.cj","path":"okhttp-okcj/src/Callback.cj","code_tokens":"func onFinish ( ) : Unit","func_name":"onFinish","docstring":""}
{"repo":"okhttp-okcj","file":"Callback.cj","path":"okhttp-okcj/src/Callback.cj","code_tokens":"func uploadProgress ( progress : Progress ) : Unit","func_name":"uploadProgress","docstring":""}
{"repo":"okhttp-okcj","file":"Callback.cj","path":"okhttp-okcj/src/Callback.cj","code_tokens":"func downloadProgress ( progress : Progress ) : Unit","func_name":"downloadProgress","docstring":""}
{"repo":"okhttp-okcj","file":"Response.cj","path":"okhttp-okcj/src/Response.cj","code_tokens":"public func code ( ) : Int64 {  return rawResponse . getCode ( ) NL }","func_name":"code","docstring":""}
{"repo":"okhttp-okcj","file":"Response.cj","path":"okhttp-okcj/src/Response.cj","code_tokens":"public func message ( ) : String {  return rawResponse . getMessage ( ) NL }","func_name":"message","docstring":""}
{"repo":"okhttp-okcj","file":"Response.cj","path":"okhttp-okcj/src/Response.cj","code_tokens":"static public func success ( isFromCache : Bool , body : String , rawCall : okhttp . Call , rawResponse : okhttp . Response ) : okhttp_okcj . Response {   var response : okhttp_okcj . Response = Response ( ) NL response . setFromCache ( isFromCache ) NL response . setBody ( body ) NL response . setRawCall ( rawCall ) NL response . setRawResponse ( rawResponse ) NL return response NL }","func_name":"success","docstring":""}
{"repo":"okhttp-okcj","file":"Response.cj","path":"okhttp-okcj/src/Response.cj","code_tokens":"static public func error ( isFromCache : Bool , rawCall : okhttp . Call , rawResponse : okhttp . Response , e : Exception ) : okhttp_okcj . Response {   var response : okhttp_okcj . Response = Response ( ) NL response . setFromCache ( isFromCache ) NL response . setRawCall ( rawCall ) NL response . setRawResponse ( rawResponse ) NL response . setException ( e ) NL return response NL }","func_name":"error","docstring":""}
{"repo":"okhttp-okcj","file":"Response.cj","path":"okhttp-okcj/src/Response.cj","code_tokens":"public func isSuccessful ( ) : Bool {  return true NL }","func_name":"isSuccessful","docstring":""}
{"repo":"okhttp-okcj","file":"Response.cj","path":"okhttp-okcj/src/Response.cj","code_tokens":"public func setBody ( body : String ) : Unit {  this . body = body NL }","func_name":"setBody","docstring":""}
{"repo":"okhttp-okcj","file":"Response.cj","path":"okhttp-okcj/src/Response.cj","code_tokens":"public func getbody ( ) : String {  return body NL }","func_name":"getbody","docstring":""}
{"repo":"okhttp-okcj","file":"Response.cj","path":"okhttp-okcj/src/Response.cj","code_tokens":"public func getException ( ) : Exception {  return exception NL }","func_name":"getException","docstring":""}
{"repo":"okhttp-okcj","file":"Response.cj","path":"okhttp-okcj/src/Response.cj","code_tokens":"public func setException ( e : Exception ) : Unit {  this . exception = e NL }","func_name":"setException","docstring":""}
{"repo":"okhttp-okcj","file":"Response.cj","path":"okhttp-okcj/src/Response.cj","code_tokens":"public func getRawCall ( ) : okhttp . Call {  return rawCall NL }","func_name":"getRawCall","docstring":""}
{"repo":"okhttp-okcj","file":"Response.cj","path":"okhttp-okcj/src/Response.cj","code_tokens":"public func setRawCall ( rawCall : okhttp . Call ) : Unit {  this . rawCall = rawCall NL }","func_name":"setRawCall","docstring":""}
{"repo":"okhttp-okcj","file":"Response.cj","path":"okhttp-okcj/src/Response.cj","code_tokens":"public func getRawResponse ( ) : okhttp . Response {  return rawResponse NL }","func_name":"getRawResponse","docstring":""}
{"repo":"okhttp-okcj","file":"Response.cj","path":"okhttp-okcj/src/Response.cj","code_tokens":"public func setRawResponse ( rawResponse : okhttp . Response ) : Unit {  this . rawResponse = rawResponse NL }","func_name":"setRawResponse","docstring":""}
{"repo":"okhttp-okcj","file":"Response.cj","path":"okhttp-okcj/src/Response.cj","code_tokens":"public func getFromCache ( ) : Bool {  return isFromCache NL }","func_name":"getFromCache","docstring":""}
{"repo":"okhttp-okcj","file":"Response.cj","path":"okhttp-okcj/src/Response.cj","code_tokens":"public func setFromCache ( fromCache : Bool ) : Unit {  isFromCache = fromCache NL }","func_name":"setFromCache","docstring":""}
{"repo":"okhttp-okcj","file":"UnderCachePolicy.cj","path":"okhttp-okcj/src/UnderCachePolicy.cj","code_tokens":"public func prepareCache ( ) : CacheEntity {  if ( request . getCacheKey ( ) . isEmpty ( ) ) {  request . getCacheKey ( HttpUtils . createUrlFromParams ( request . getBaseUrl ( ) , request . returnParams ( ) . urlParamsMap ) ) NL } NL if ( request . getCacheMode ( ) . toString ( ) . isEmpty ( ) ) {  request . getCacheMode ( CacheMode . NO_CACHE ) NL } NL  var cacheMode : CacheMode = request . getCacheMode ( ) NL if ( cacheMode != CacheMode . NO_CACHE ) {  HeaderParser . addCacheHeaders ( request , cacheEntity , cacheMode ) NL cacheEntity . setExpire ( true ) NL } NL return cacheEntity NL }","func_name":"prepareCache","docstring":""}
{"repo":"okhttp-okcj","file":"UnderCachePolicy.cj","path":"okhttp-okcj/src/UnderCachePolicy.cj","code_tokens":"public func prepareRawCall ( ) : okhttp . Call {  synchronized ( lock ) {  if ( executed ) {  throw HttpException . COMMON ( Already executed! ) NL } NL executed = true NL rawCall = request . getRawCall ( ) NL if ( executed ) {  rawCall . cancel ( ) NL } NL return rawCall NL } NL }","func_name":"prepareRawCall","docstring":""}
{"repo":"okhttp-okcj","file":"UnderCachePolicy.cj","path":"okhttp-okcj/src/UnderCachePolicy.cj","code_tokens":"protected func requestNetworkSync ( ) : okhttp_okcj . Response {  try {   var resp : okhttp . Response = rawCall . execute ( ) NL  var respCode : Int64 = resp . getCode ( ) NL if ( respCode == 404 || respCode > = 500 ) {  return Response . error ( false , rawCall , resp , HttpException . NET_ERROR ( ) ) NL } NL  var body : String = request . getConverter ( ) . convertResponse ( resp ) NL return Response . success ( false , body , rawCall , resp ) NL } catch ( e : Exception ) {  if ( canceled ) {  rawCall . cancel ( ) NL } else {  requestNetworkSync ( ) NL ( ) NL } NL return Response . error ( false , rawCall , ResponseBuilder ( ) . build ( ) , e ) NL } NL }","func_name":"requestNetworkSync","docstring":""}
{"repo":"okhttp-okcj","file":"UnderCachePolicy.cj","path":"okhttp-okcj/src/UnderCachePolicy.cj","code_tokens":"protected func requestNetworkAsync ( ) : Unit {   var cb : Callbacks = Callbacks ( ) NL rawCall . enqueue ( cb ) NL }","func_name":"requestNetworkAsync","docstring":""}
{"repo":"okhttp-okcj","file":"UnderCachePolicy.cj","path":"okhttp-okcj/src/UnderCachePolicy.cj","code_tokens":"protected func saveCache ( headers : Header , data : String ) : Unit {  if ( request . getCacheMode ( ) == CacheMode . NO_CACHE ) {  return NL } NL  var cache : CacheEntity = HeaderParser . createCacheEntity ( headers , data , request . getCacheMode ( ) , request . getCacheKey ( ) ) NL }","func_name":"saveCache","docstring":""}
{"repo":"okhttp-okcj","file":"UnderCachePolicy.cj","path":"okhttp-okcj/src/UnderCachePolicy.cj","code_tokens":"public func isExecuted ( ) : Bool {  return executed NL }","func_name":"isExecuted","docstring":""}
{"repo":"okhttp-okcj","file":"UnderCachePolicy.cj","path":"okhttp-okcj/src/UnderCachePolicy.cj","code_tokens":"public func cancel ( ) {  canceled = true NL rawCall . cancel ( ) NL }","func_name":"cancel","docstring":""}
{"repo":"okhttp-okcj","file":"UnderCachePolicy.cj","path":"okhttp-okcj/src/UnderCachePolicy.cj","code_tokens":"public func isCanceled ( ) : Bool {  if ( canceled ) {  return true NL } NL synchronized ( lock ) {  return rawCall . isCanceled ( ) NL } NL }","func_name":"isCanceled","docstring":""}
{"repo":"okhttp-okcj","file":"UnderCachePolicy.cj","path":"okhttp-okcj/src/UnderCachePolicy.cj","code_tokens":"public func onFailure ( call : okhttp . Call , e : Exception ) : Unit {  if ( uc . currentRetryCount < uc . request . getRetryCount ( ) ) {  uc . currentRetryCount ++ NL uc . rawCall = uc . request . getRawCall ( ) NL if ( uc . canceled ) {  uc . rawCall . cancel ( ) NL } else {  uc . rawCall . enqueue ( this ) NL } NL } else {   var error : okhttp_okcj . Response = Response . error ( false , call , response , e ) NL uc . onError ( error ) NL } NL }","func_name":"onFailure","docstring":""}
{"repo":"okhttp-okcj","file":"UnderCachePolicy.cj","path":"okhttp-okcj/src/UnderCachePolicy.cj","code_tokens":"public func onResponse ( call : okhttp . Call , response : okhttp . Response ) : Unit {   var responseCode : Int64 = response . getCode ( ) NL if ( responseCode == 404 || responseCode > = 500 ) {   var error : okhttp_okcj . Response = Response . error ( false , call , response , HttpException . NET_ERROR ( ) ) NL uc . onError ( error ) NL return NL } NL try {   var body : String = uc . request . getConverter ( ) . convertResponse ( response ) NL uc . saveCache ( response . getHeaders ( ) , body ) NL  var success : okhttp_okcj . Response = Response . success ( false , body , call , response ) NL uc . onSuccess ( success ) NL } catch ( e : Exception ) {   var error : okhttp_okcj . Response = Response . error ( false , call , response , e ) NL uc . onError ( error ) NL } NL }","func_name":"onResponse","docstring":""}
{"repo":"okhttp-okcj","file":"PutRequest.cj","path":"okhttp-okcj/src/PutRequest.cj","code_tokens":"public func getMethod ( ) : HttpMethod {  return HttpMethod . PUT NL }","func_name":"getMethod","docstring":"/**\n     * The Function is getMethod\n     *\n     * @return Type of HttpMethod\n     * @since 0.30.4\n     */"}
{"repo":"okhttp-okcj","file":"CacheCall.cj","path":"okhttp-okcj/src/CacheCall.cj","code_tokens":"public func execute ( ) : Response {   var cacheEntity : CacheEntity = policy . prepareCache ( ) NL return policy . requestSync ( cacheEntity ) NL }","func_name":"execute","docstring":"/**\r\n     * The Function is execute\r\n     *\r\n     * @return Type of Response\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"CacheCall.cj","path":"okhttp-okcj/src/CacheCall.cj","code_tokens":"public func execute ( callback : Callback ) : Unit {   var cacheEntity : CacheEntity = policy . prepareCache ( ) NL policy . requestAsync ( cacheEntity , callback ) NL }","func_name":"execute","docstring":"/**\r\n     * The Function is execute\r\n     *\r\n     * @return Type of Response\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"CacheCall.cj","path":"okhttp-okcj/src/CacheCall.cj","code_tokens":"private func preparePolicy ( p : CachePolicy ) : CachePolicy {  return p NL }","func_name":"preparePolicy","docstring":""}
{"repo":"okhttp-okcj","file":"CacheCall.cj","path":"okhttp-okcj/src/CacheCall.cj","code_tokens":"public func isExecuted ( ) : Bool {  return policy . isExecuted ( ) NL }","func_name":"isExecuted","docstring":"/**\r\n     * The Function is isExecuted\r\n     *\r\n     * @return Type of Bool\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"CacheCall.cj","path":"okhttp-okcj/src/CacheCall.cj","code_tokens":"public func cancel ( ) : Unit {  policy . cancel ( ) NL }","func_name":"cancel","docstring":"/**\r\n     * The Function is cancel\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"CacheCall.cj","path":"okhttp-okcj/src/CacheCall.cj","code_tokens":"public func isCanceled ( ) : Bool {  return policy . isCanceled ( ) NL }","func_name":"isCanceled","docstring":"/**\r\n     * The Function is isCanceled\r\n     *\r\n     * @return Type of Bool\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"CacheCall.cj","path":"okhttp-okcj/src/CacheCall.cj","code_tokens":"public func clone ( ) : Call {  return CacheCall ( request , policy ) NL }","func_name":"clone","docstring":"/**\r\n     * The Function is clone\r\n     *\r\n     * @return Type of Call\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"CacheCall.cj","path":"okhttp-okcj/src/CacheCall.cj","code_tokens":"public func getRequest ( ) : Request {  return request NL }","func_name":"getRequest","docstring":"/**\r\n     * The Function is getRequest\r\n     *\r\n     * @return Type of Request\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"DeleteRequest.cj","path":"okhttp-okcj/src/DeleteRequest.cj","code_tokens":"public func getMethod ( ) : HttpMethod {  return HttpMethod . DELETE NL }","func_name":"getMethod","docstring":"/**\n     * The Function is getMethod\n     *\n     * @return Type of HttpMethod\n     * @since 0.30.4\n     */"}
{"repo":"okhttp-okcj","file":"NoBodyRequest.cj","path":"okhttp-okcj/src/NoBodyRequest.cj","code_tokens":"public func generateRequestBuilder ( requestBody : okhttp . RequestBody ) : okhttp . RequestBuilder {  url = HttpUtils . createUrlFromParams ( baseUrl , params . urlParamsMap ) NL  var requestBuilder = okhttp . Request . builder ( ) NL return HttpUtils . appendHeaders ( requestBuilder , headers ) NL }","func_name":"generateRequestBuilder","docstring":""}
{"repo":"okhttp-okcj","file":"TraceRequest.cj","path":"okhttp-okcj/src/TraceRequest.cj","code_tokens":"public func getMethod ( ) : HttpMethod {  return HttpMethod . TRACE NL }","func_name":"getMethod","docstring":"/**\n     * The Function is getMethod\n     *\n     * @return Type of HttpMethod\n     * @since 0.30.4\n     */"}
{"repo":"okhttp-okcj","file":"RequestFailedCachePolicy.cj","path":"okhttp-okcj/src/RequestFailedCachePolicy.cj","code_tokens":"public func onSuccess ( success : okhttp_okcj . Response ) : Unit {  spawn { mCallback . onSuccess ( success ) NL mCallback . onFinish ( ) NL } NL }","func_name":"onSuccess","docstring":""}
{"repo":"okhttp-okcj","file":"RequestFailedCachePolicy.cj","path":"okhttp-okcj/src/RequestFailedCachePolicy.cj","code_tokens":"public func onError ( error : okhttp_okcj . Response ) : Unit {  spawn { mCallback . onError ( error ) NL mCallback . onFinish ( ) NL } NL }","func_name":"onError","docstring":""}
{"repo":"okhttp-okcj","file":"RequestFailedCachePolicy.cj","path":"okhttp-okcj/src/RequestFailedCachePolicy.cj","code_tokens":"public func requestSync ( cacheEntity : CacheEntity ) : okhttp_okcj . Response {   var resp : okhttp . Response = rawCall . execute ( ) NL try {  prepareRawCall ( ) NL } catch ( e : Exception ) {  return Response . error ( false , rawCall , resp , e ) NL } NL  var response : okhttp_okcj . Response = requestNetworkSync ( ) NL if ( ! ( response . isSuccessful ( ) ) ) {  response = Response . success ( true , cacheEntity . getData ( ) , rawCall , response . getRawResponse ( ) ) NL } NL return response NL }","func_name":"requestSync","docstring":""}
{"repo":"okhttp-okcj","file":"RequestFailedCachePolicy.cj","path":"okhttp-okcj/src/RequestFailedCachePolicy.cj","code_tokens":"public func requestAsync ( cacheEntity : CacheEntity , callback : Callback ) : Unit {  mCallback = callback NL  let resp : okhttp . Response = rawCall . execute ( ) NL spawn { mCallback . onStart ( request ) NL try {  prepareRawCall ( ) NL } catch ( e : Exception ) {   var error : okhttp_okcj . Response = Response . error ( false , rawCall , resp , e ) NL mCallback . onError ( error ) NL return NL } NL requestNetworkAsync ( ) NL } NL }","func_name":"requestAsync","docstring":""}
{"repo":"okhttp-okcj","file":"RequestFailedCachePolicy.cj","path":"okhttp-okcj/src/RequestFailedCachePolicy.cj","code_tokens":"public func onAnalysisResponse ( call : okhttp . Call , response : okhttp . Response ) : Bool {  return true NL }","func_name":"onAnalysisResponse","docstring":""}
{"repo":"okhttp-okcj","file":"NoCachePolicy.cj","path":"okhttp-okcj/src/NoCachePolicy.cj","code_tokens":"public func onSuccess ( success : okhttp_okcj . Response ) : Unit {  spawn { mCallback . onSuccess ( success ) NL mCallback . onFinish ( ) NL } NL }","func_name":"onSuccess","docstring":""}
{"repo":"okhttp-okcj","file":"NoCachePolicy.cj","path":"okhttp-okcj/src/NoCachePolicy.cj","code_tokens":"public func onError ( error : okhttp_okcj . Response ) : Unit {  spawn { mCallback . onError ( error ) NL mCallback . onFinish ( ) NL } NL }","func_name":"onError","docstring":""}
{"repo":"okhttp-okcj","file":"NoCachePolicy.cj","path":"okhttp-okcj/src/NoCachePolicy.cj","code_tokens":"public func requestSync ( cacheEntity : CacheEntity ) : okhttp_okcj . Response {   var resp : okhttp . Response = rawCall . execute ( ) NL try {  prepareRawCall ( ) NL } catch ( e : Exception ) {  return Response . error ( false , rawCall , resp , e ) NL } NL return requestNetworkSync ( ) NL }","func_name":"requestSync","docstring":""}
{"repo":"okhttp-okcj","file":"NoCachePolicy.cj","path":"okhttp-okcj/src/NoCachePolicy.cj","code_tokens":"public func requestAsync ( cacheEntity : CacheEntity , callback : Callback ) : Unit {  mCallback = callback NL  let resp : okhttp . Response = rawCall . execute ( ) NL spawn { mCallback . onStart ( request ) NL try {  prepareRawCall ( ) NL } catch ( e : Exception ) {   var error : okhttp_okcj . Response = Response . error ( false , rawCall , resp , e ) NL mCallback . onError ( error ) NL return NL } NL requestNetworkAsync ( ) NL } NL }","func_name":"requestAsync","docstring":""}
{"repo":"okhttp-okcj","file":"NoCachePolicy.cj","path":"okhttp-okcj/src/NoCachePolicy.cj","code_tokens":"public func onAnalysisResponse ( call : okhttp . Call , response : okhttp . Response ) : Bool {  return true NL }","func_name":"onAnalysisResponse","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func Multipart ( isMultipart : Bool ) : Request","func_name":"Multipart","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func SpliceUrl ( isSpliceUrl : Bool ) : Request","func_name":"SpliceUrl","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func upRequestBody ( requestBody : okhttp . RequestBody ) : Request","func_name":"upRequestBody","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func setParams ( key : String , file : FileInfo ) : Request","func_name":"setParams","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func addFileParams ( key : String , files : ArrayList < FileInfo > ) : Request","func_name":"addFileParams","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func addFileWrapperParams ( key : String , fileWrappers : ArrayList < FileWrapper > ) : Request","func_name":"addFileWrapperParams","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func setParams ( key : String , file : FileInfo , fileName : String ) : Request","func_name":"setParams","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func setParams ( key : String , file : FileInfo , fileName : String , contentType : String ) : Request","func_name":"setParams","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func upString ( string : String ) : Request","func_name":"upString","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func upString ( string : String , mediaType : String ) : Request","func_name":"upString","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func upJson ( json : String ) : Request","func_name":"upJson","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func upJson ( jsonObject : JsonObject ) : Request","func_name":"upJson","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func upJson ( jsonArray : JsonArray ) : Request","func_name":"upJson","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func upBytes ( bs : Array < Byte > ) : Request","func_name":"upBytes","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func upBytes ( bs : Array < Byte > , mediaType : String ) : Request","func_name":"upBytes","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func upFile ( file : FileInfo ) : Request","func_name":"upFile","docstring":""}
{"repo":"okhttp-okcj","file":"HasBody.cj","path":"okhttp-okcj/src/HasBody.cj","code_tokens":"func upFile ( file : FileInfo , mediaType : String ) : Request","func_name":"upFile","docstring":""}
{"repo":"okhttp-okcj","file":"GetRequest.cj","path":"okhttp-okcj/src/GetRequest.cj","code_tokens":"public func getMethod ( ) : HttpMethod {  return HttpMethod . GET NL }","func_name":"getMethod","docstring":"/**\n     * The Function is getMethod\n     *\n     * @return Type of HttpMethod\n     * @since 0.30.4\n     */"}
{"repo":"okhttp-okcj","file":"PostRequest.cj","path":"okhttp-okcj/src/PostRequest.cj","code_tokens":"public func getMethod ( ) : HttpMethod {  return HttpMethod . POST NL }","func_name":"getMethod","docstring":"/**\n     * The Function is getMethod\n     *\n     * @return Type of HttpMethod\n     * @since 0.30.4\n     */"}
{"repo":"okhttp-okcj","file":"OptionsRequest.cj","path":"okhttp-okcj/src/OptionsRequest.cj","code_tokens":"public func getMethod ( ) : HttpMethod {  return HttpMethod . OPTIONS NL }","func_name":"getMethod","docstring":"/**\n     * The Function is getMethod\n     *\n     * @return Type of HttpMethod\n     * @since 0.30.4\n     */"}
{"repo":"okhttp-okcj","file":"FileConvert.cj","path":"okhttp-okcj/src/FileConvert.cj","code_tokens":"public func setCallback ( callback : okhttp_okcj . Callback ) : Unit {  this . callback = callback NL }","func_name":"setCallback","docstring":""}
{"repo":"okhttp-okcj","file":"FileConvert.cj","path":"okhttp-okcj/src/FileConvert.cj","code_tokens":"public func convertResponse ( response : okhttp . Response ) : File {   let url : String = response . getRequest ( ) . getUrl ( ) . toString ( ) NL  var directoryInfo : DirectoryInfo = DirectoryInfo ( folder ) NL directoryInfo . create ( ) NL  var fileInfo : FileInfo = FileInfo ( folder + / + fileName ) NL fileInfo . delete ( ) NL  var file : File = File ( fileInfo , ReadWrite , Open ) NL  var byteArrayStream : ByteArrayStream = ByteArrayStream ( ) NL  let bytes = Array < Byte > ( 8192 , item : 0 ) NL try {   var body : okhttp . ResponseBody = response . getBody ( ) . getOrThrow ( ) NL byteArrayStream = body . getSource ( ) NL  var progress : Progress = Progress ( ) NL progress . totalSize = body . getContentLength ( ) NL progress . fileName = fileName NL progress . filePath = fileInfo . getCanonicalPath ( ) NL progress . status = Progress . LOADING NL progress . url = url NL progress . tag = url NL  var len : Int64 = 0 NL while ( true ) {  len = byteArrayStream . read ( bytes ) NL if ( len == - 1 ) {  break NL } NL file . write ( bytes ) NL Progress . changeProgress ( progress , len , Action ( ) ) NL } NL file . flush ( ) NL return file NL } finally {  file . close ( ) NL } NL }","func_name":"convertResponse","docstring":""}
{"repo":"okhttp-okcj","file":"FileConvert.cj","path":"okhttp-okcj/src/FileConvert.cj","code_tokens":"private func onProgress ( progress : Progress ) : Unit {  spawn { callback . downloadProgress ( progress ) NL } NL }","func_name":"onProgress","docstring":""}
{"repo":"okhttp-okcj","file":"StringCallback.cj","path":"okhttp-okcj/src/StringCallback.cj","code_tokens":"public func onError ( response : Response ) : Unit {  }","func_name":"onError","docstring":""}
{"repo":"okhttp-okcj","file":"StringCallback.cj","path":"okhttp-okcj/src/StringCallback.cj","code_tokens":"public func onSuccess ( response : Response ) : Unit {  }","func_name":"onSuccess","docstring":""}
{"repo":"okhttp-okcj","file":"StringCallback.cj","path":"okhttp-okcj/src/StringCallback.cj","code_tokens":"public func convertResponse ( response : okhttp . Response ) : String {   let s : String = convert . convertResponse ( response ) NL response . close ( ) NL return s NL }","func_name":"convertResponse","docstring":""}
{"repo":"okhttp-okcj","file":"Converter.cj","path":"okhttp-okcj/src/Converter.cj","code_tokens":"func convertResponse ( response : okhttp . Response ) : String","func_name":"convertResponse","docstring":""}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func get ( key : K ) : Option < V > {  return this . map . get ( key ) NL }","func_name":"get","docstring":"/**\r\n     * The Function is get\r\n     *\r\n     * @param key of K\r\n     *\r\n     * @return Type of Option<V>\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func getI ( index : Int64 ) : Option < ( K , V ) > {   let key : K = this . list . get ( index ) NL return ( key , this . map [ key ] ) NL }","func_name":"getI","docstring":"/**\r\n     * The Function is get\r\n     *\r\n     * @param index of Int64\r\n     *\r\n     * @return Type of Option<(K,V)>\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func contains ( key : K ) : Bool {  return this . map . contains ( key ) NL }","func_name":"contains","docstring":"/**\r\n     * The Function is contains\r\n     *\r\n     * @param key of K\r\n     *\r\n     * @return Type of Bool\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func containsAll ( keys : Collection < K > ) : Bool {  return this . map . containsAll ( keys ) NL }","func_name":"containsAll","docstring":"/**\r\n     * The Function is containsAll\r\n     *\r\n     * @param keys of Collection<K>\r\n     *\r\n     * @return Type of Bool\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func put ( key : K , value : V ) : Option < V > {  lock . lock ( ) NL try {   let result = this . map . put ( key , value ) NL match ( result ) { case Some ( v ) => ( ) NL case None => this . list . append ( key ) NL } NL return result NL } finally {  lock . unlock ( ) NL } NL }","func_name":"put","docstring":"/**\r\n     * The Function is put\r\n     *\r\n     * @param key of K\r\n     * @param value of V\r\n     *\r\n     * @return Type of Option<V>\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func putAll ( elements : Collection < ( K , V ) > ) : Unit {  lock . lock ( ) NL try {  for ( ( k , v ) in elements ) {  this . put ( k , v ) NL } NL } finally {  lock . unlock ( ) NL } NL }","func_name":"putAll","docstring":"/**\r\n     * The Function is putAll\r\n     *\r\n     * @param elements of Collection<(K,V)>\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func remove ( key : K ) : Option < V > {  lock . lock ( ) NL try {   let result = this . map . remove ( key ) NL return match ( result ) { case Some ( v ) =>  var index = 0 NL for ( k in this . list ) {  if ( key == k ) {  break NL } NL index ++ NL } NL  let rem = this . list . remove ( index ) NL return v NL case None => None NL } NL } finally {  lock . unlock ( ) NL } NL }","func_name":"remove","docstring":"/**\r\n     * The Function is remove\r\n     *\r\n     * @param key of K\r\n     *\r\n     * @return Type of Option<V>\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func removeAll ( keys : Collection < K > ) : Unit {  for ( key in keys ) {  this . remove ( key ) NL } NL }","func_name":"removeAll","docstring":"/**\r\n     * The Function is removeAll\r\n     *\r\n     * @param keys of Collection<K>\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func removeIf ( predicate : ( K , V ) -> Bool ) : Unit {  throw Exception ( This operation is not supported ) NL }","func_name":"removeIf","docstring":"/**\r\n     * The Function is removeIf\r\n     *\r\n     * @param predicate of (K,V)->Bool\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func clear ( ) : Unit {  lock . lock ( ) NL try {  this . map . clear ( ) NL this . list . clear ( ) NL } finally {  lock . unlock ( ) NL } NL }","func_name":"clear","docstring":"/**\r\n     * The Function is clear\r\n     *\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func clone ( ) : Map < K , V > {  return this . map . clone ( ) NL }","func_name":"clone","docstring":"/**\r\n     * The Function is clone\r\n     *\r\n     * @return Type of Map<K, V>\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public operator func [ ] ( key : K ) : V {  return this . map [ key ] NL }","func_name":"[]","docstring":""}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public operator func [ ] ( key : K , value ! : V ) : Unit {  this . map [ key ] = value NL }","func_name":"[]","docstring":""}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func keys ( ) : Keys < K > {  return this . map . keys ( ) NL }","func_name":"keys","docstring":"/**\r\n     * The Function is keys\r\n     *\r\n     *\r\n     * @return Type of Keys<K>\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func values ( ) : Values < V > {  return this . map . values ( ) NL }","func_name":"values","docstring":"/**\r\n     * The Function is values\r\n     *\r\n     * @return Type of Values<V>\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func isEmpty ( ) : Bool {  return this . size == 0 NL }","func_name":"isEmpty","docstring":"/**\r\n     * The Function is isEmpty\r\n     *\r\n     * @return Type of Bool\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func iterator ( ) : Iterator < ( K , V ) > {  return LinkedHashMapIterator < K , V > ( this . list . iterator ( ) , this . map ) NL }","func_name":"iterator","docstring":"/**\r\n     * The Function is iterator\r\n     *\r\n     * @return Type of Iterator<(K,V)>\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func next ( ) : Option < ( K , V ) > {  match ( it . next ( ) ) { case Some ( v ) => return ( v , this . map [ v ] ) NL case _ => None NL } NL }","func_name":"next","docstring":"/**\r\n     * The Function is next\r\n     *\r\n     * @return Option<(K,V)>\r\n     *\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func iterator ( ) : Iterator < ( K , V ) > {  this NL }","func_name":"iterator","docstring":"/**\r\n     * The Function is iterator\r\n     *\r\n     * @return Type of Iterator<(K,V)>\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func clear ( ) : Unit {  mySize = 0 NL first = None NL last = None NL }","func_name":"clear","docstring":"/**\r\n     * The Function is clear\r\n     *\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func isEmpty ( ) : Bool {  mySize == 0 NL }","func_name":"isEmpty","docstring":"/**\r\n     * The Function is isEmpty\r\n     *\r\n     * @return Type of Bool\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func iterator ( ) : Iterator < T > {  LinkedListIterator ( first ) NL }","func_name":"iterator","docstring":"/**\r\n     * The Function is iterator\r\n     *\r\n     * @return Type of Iterator<(K,V)>\r\n     * @since 0.30.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func getFirst ( ) : T {  match ( first ) { case Some ( v ) => v . value NL case _ => throw IndexOutOfBoundsException ( ) NL } NL }","func_name":"getFirst","docstring":"/**\r\n     * Get LinkedList first value.\r\n     *\r\n     * @return T The return type of T\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func getLast ( ) : T {  match ( last ) { case Some ( v ) => v . value NL case _ => throw IndexOutOfBoundsException ( ) NL } NL }","func_name":"getLast","docstring":"/**\r\n     * Get LinkedList last value.\r\n     *\r\n     * @return T The return type of T\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func get ( index : Int64 ) : T {  if ( index < 0 || index > = mySize ) {  throw IndexOutOfBoundsException ( ) NL } NL match ( at ( index ) ) { case Some ( v ) => v . value NL case _ => throw IndexOutOfBoundsException ( ) NL } NL }","func_name":"get","docstring":"/**\r\n     * The Function is get\r\n     *\r\n     * @param key of K\r\n     *\r\n     * @return Type of Option<V>\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func set ( index : Int64 , element : T ) : T {  if ( index < 0 || index > = mySize ) {  throw IndexOutOfBoundsException ( ) NL } NL match ( at ( index ) ) { case Some ( v ) =>  let oldValue = v . value NL v . value = element NL oldValue NL case _ => throw IndexOutOfBoundsException ( ) NL } NL }","func_name":"set","docstring":"/**\r\n     * Replace element at specified location\r\n     *\r\n     * @param index Specified location index\r\n     * @param element Specified location value\r\n     *\r\n     * @return T The return type of T\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func prepend ( element : T ) : Unit {  linkFirst ( element ) NL }","func_name":"prepend","docstring":"/**\r\n     * Append element before\r\n     *\r\n     * @param element Append element\r\n     *\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func append ( element : T ) : Unit {  linkLast ( element ) NL }","func_name":"append","docstring":"/**\r\n     * Append element after\r\n     *\r\n     * @param element Append element\r\n     *\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func insert ( index : Int64 , element : T ) : Unit {  if ( index < 0 || index > mySize ) {  throw IndexOutOfBoundsException ( ) NL } NL if ( index == 0 ) {  linkLast ( element ) NL } else {  linkBefore ( element , at ( index ) ) NL } NL }","func_name":"insert","docstring":"/**\r\n     * Inserts an element at the specified location\r\n     *\r\n     * @param index Specified location index\r\n     * @param element Insert element\r\n     *\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func remove ( index : Int64 ) : T {  if ( index < 0 || index > = mySize ) {  throw IndexOutOfBoundsException ( ) NL } NL match ( at ( index ) ) { case Some ( v ) => unlink ( v ) NL case _ => throw IndexOutOfBoundsException ( ) NL } NL }","func_name":"remove","docstring":"/**\r\n     * The Function is remove\r\n     *\r\n     * @param key of K\r\n     *\r\n     * @return Type of Option<V>\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func removeFirst ( ) : T {  match ( first ) { case Some ( v ) => unlinkFirst ( v ) NL case _ => throw IndexOutOfBoundsException ( ) NL } NL }","func_name":"removeFirst","docstring":"/**\r\n     * Remove first element\r\n     *\r\n     * @return The return type of T\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func removeLast ( ) : T {  match ( last ) { case Some ( v ) => unlinkLast ( v ) NL case _ => throw IndexOutOfBoundsException ( ) NL } NL }","func_name":"removeLast","docstring":"/**\r\n     * Remove last element\r\n     *\r\n     * @return The return type of T\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"private func at ( index : Int64 ) : ? Node < T > {  if ( index < ( mySize >> 1 ) ) {   var x = first NL for ( i in 0 .. index ) {  match ( x ) { case Some ( v ) => x = v . next NL case _ => ( ) NL } NL } NL x NL } else {   var x = last NL  var i = mySize - 1 NL while ( i > index ) {  match ( x ) { case Some ( v ) => x = v . prev NL case _ => ( ) NL } NL i -- NL } NL x NL } NL }","func_name":"at","docstring":"/*\r\n     * The Function is at\r\n     *\r\n     * @param index of Int64\r\n     *\r\n     * @return Type of ?Node<T>\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"private func linkFirst ( element : T ) : Unit {   let first = this . first NL  let newNode = Node ( prev : None < Node < T > > , value : element , next : first ) NL this . first = newNode NL match ( first ) { case Some ( v ) => v . prev = newNode NL case _ => last = newNode NL } NL mySize ++ NL }","func_name":"linkFirst","docstring":"/*\r\n     * The Function is linkFirst\r\n     *\r\n     * @param element of T\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"private func linkLast ( element : T ) : Unit {   let last = this . last NL  let newNode = Node ( prev : last , value : element , next : None < Node < T > > ) NL this . last = newNode NL match ( last ) { case Some ( v ) => v . next = newNode NL case _ => first = newNode NL } NL mySize ++ NL }","func_name":"linkLast","docstring":"/*\r\n     * The Function is linkLast\r\n     *\r\n     * @param element of T\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"private func linkBefore ( element : T , succ : ? Node < T > ) : Unit {  match ( succ ) { case Some ( v ) =>  let pred = v . prev NL  let newNode = Node ( prev : pred , value : element , next : succ ) NL v . prev = newNode NL match ( pred ) { case Some ( v2 ) => v2 . next = newNode NL case _ => first = newNode NL } NL mySize ++ NL case _ => ( ) NL } NL }","func_name":"linkBefore","docstring":"/*\r\n     * The Function is linkBefore\r\n     *\r\n     * @param element of T\r\n     * @param succ of ?Node<T>\r\n     *\r\n     * @return Type of Unit\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"private func unlinkFirst ( x : Node < T > ) : T {   let element = x . value NL  let next = x . next NL x . next = None NL this . first = next NL match ( next ) { case Some ( v ) => v . prev = None NL case _ => last = None NL } NL mySize -- NL element NL }","func_name":"unlinkFirst","docstring":"/*\r\n     * The Function is unlinkFirst\r\n     *\r\n     * @param x of Node<T>\r\n     *\r\n     * @return Type of T\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"private func unlinkLast ( x : Node < T > ) : T {   let element = x . value NL  let prev = x . prev NL x . prev = None NL this . last = prev NL match ( prev ) { case Some ( v ) => v . next = None NL case _ => first = None NL } NL mySize -- NL element NL }","func_name":"unlinkLast","docstring":"/*\r\n     * The Function is unlinkLast\r\n     *\r\n     * @param x of Node<T>\r\n     *\r\n     * @return Type of T\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"private func unlink ( x : Node < T > ) : T {   let element = x . value NL  let next = x . next NL  let prev = x . prev NL match ( prev ) { case Some ( v ) => v . next = next NL x . prev = None NL case _ => first = next NL } NL match ( next ) { case Some ( v ) => v . prev = prev NL x . next = None NL case _ => last = prev NL } NL mySize -- NL element NL }","func_name":"unlink","docstring":"/*\r\n     * The Function is unlink\r\n     *\r\n     * @param x of Node<T>\r\n     *\r\n     * @return Type of T\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func next ( ) : ? T {  match ( current ) { case Some ( v ) =>  let element = v . value NL current = v . next NL element NL case _ => None NL } NL }","func_name":"next","docstring":"/**\r\n     * The Function is next\r\n     *\r\n     * @return Option<(K,V)>\r\n     *\r\n     * @since 0.28.4\r\n     */"}
{"repo":"okhttp-okcj","file":"LinkedHashMap.cj","path":"okhttp-okcj/src/LinkedHashMap.cj","code_tokens":"public func iterator ( ) : Iterator < T > {  this NL }","func_name":"iterator","docstring":"/**\r\n     * The Function is iterator\r\n     *\r\n     * @return Type of Iterator<(K,V)>\r\n     * @since 0.30.4\r\n     */"}
