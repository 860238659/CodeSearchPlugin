{"repo":"rxcj","file":"lambda_observer.cj","path":"rxcj/src/rx/lambda_observer.cj","code_tokens":"public func onSubscribe ( disposable : Disposable ) {  upstream = disposable NL try {  onSubscribeFunc ( disposable ) NL } catch ( ex : Exception ) {  Exceptions . throwIfFatal ( ex ) NL disposable . dispose ( ) NL onError ( ex ) NL } NL }","func_name":"onSubscribe","docstring":""}
{"repo":"rxcj","file":"lambda_observer.cj","path":"rxcj/src/rx/lambda_observer.cj","code_tokens":"public func onNext ( value : T ) {  if ( ! isDisposed ( ) ) {  try {  onNextFunc ( value ) NL } catch ( e : Exception ) {  Exceptions . throwIfFatal ( e ) NL DisposableHeler . dispose ( upstream ) NL onError ( e ) NL } NL } NL }","func_name":"onNext","docstring":""}
{"repo":"rxcj","file":"lambda_observer.cj","path":"rxcj/src/rx/lambda_observer.cj","code_tokens":"public func onError ( error : Exception ) {  if ( ! isDisposed ( ) ) {  try {  onErrorFunc ( error ) NL } catch ( e : Exception ) {  Exceptions . throwIfFatal ( e ) NL RxJavaPlugins . onError ( CompositeException ( [ error , e ] ) ) NL } finally {  DisposableHeler . dispose ( upstream ) NL } NL } else {  RxJavaPlugins . onError ( error ) NL } NL }","func_name":"onError","docstring":""}
{"repo":"rxcj","file":"lambda_observer.cj","path":"rxcj/src/rx/lambda_observer.cj","code_tokens":"public func onComplete ( ) {  if ( ! isDisposed ( ) ) {  try {  onCompleteFunc ( ) NL } catch ( e : Exception ) {  Exceptions . throwIfFatal ( e ) NL RxJavaPlugins . onError ( e ) NL } finally {  DisposableHeler . dispose ( upstream ) NL } NL } NL }","func_name":"onComplete","docstring":""}
{"repo":"rxcj","file":"lambda_observer.cj","path":"rxcj/src/rx/lambda_observer.cj","code_tokens":"public func dispose ( ) {  DisposableHeler . dispose ( upstream ) NL disposed = true NL }","func_name":"dispose","docstring":""}
{"repo":"rxcj","file":"lambda_observer.cj","path":"rxcj/src/rx/lambda_observer.cj","code_tokens":"public func isDisposed ( ) : Bool {  return disposed NL }","func_name":"isDisposed","docstring":""}
{"repo":"rxcj","file":"observer.cj","path":"rxcj/src/rx/observer.cj","code_tokens":"func onSubscribe ( disposable : Disposable ) : Unit","func_name":"onSubscribe","docstring":""}
{"repo":"rxcj","file":"observer.cj","path":"rxcj/src/rx/observer.cj","code_tokens":"func onNext ( value : T ) : Unit","func_name":"onNext","docstring":""}
{"repo":"rxcj","file":"observer.cj","path":"rxcj/src/rx/observer.cj","code_tokens":"func onError ( error : Exception ) : Unit","func_name":"onError","docstring":""}
{"repo":"rxcj","file":"observer.cj","path":"rxcj/src/rx/observer.cj","code_tokens":"func onComplete ( ) : Unit","func_name":"onComplete","docstring":""}
{"repo":"rxcj","file":"disposable.cj","path":"rxcj/src/rx/disposable.cj","code_tokens":"func dispose ( ) : Unit","func_name":"dispose","docstring":""}
{"repo":"rxcj","file":"disposable.cj","path":"rxcj/src/rx/disposable.cj","code_tokens":"func isDisposed ( ) : Bool","func_name":"isDisposed","docstring":""}
{"repo":"rxcj","file":"disposable.cj","path":"rxcj/src/rx/disposable.cj","code_tokens":"static public func dispose ( disposable : ? Disposable ) {  match ( disposable ) { case Some ( d ) => d . dispose ( ) NL case _ => ( ) NL } NL }","func_name":"dispose","docstring":""}
{"repo":"rxcj","file":"disposable.cj","path":"rxcj/src/rx/disposable.cj","code_tokens":"static public func isDisposed ( disposable : ? Disposable ) : Bool {  return match ( disposable ) { case Some ( d ) => d . isDisposed ( ) NL case _ => false NL } NL }","func_name":"isDisposed","docstring":""}
{"repo":"rxcj","file":"observable_map.cj","path":"rxcj/src/rx/observable_map.cj","code_tokens":"public func subscribeActual ( observer : Observer < R > ) {  source . subscribe ( MapObserver ( observer , mapper ) ) NL }","func_name":"subscribeActual","docstring":""}
{"repo":"rxcj","file":"observable_map.cj","path":"rxcj/src/rx/observable_map.cj","code_tokens":"public func onNext ( value : T ) {  if ( done ) {  return NL } NL  let v : R NL try {  v = mapper ( value ) NL } catch ( ex : Exception ) {  fail ( ex ) NL return NL } NL downstream . onNext ( v ) NL }","func_name":"onNext","docstring":""}
{"repo":"rxcj","file":"observable_create.cj","path":"rxcj/src/rx/observable_create.cj","code_tokens":"public func subscribeActual ( observer : Observer < T > ) {   let emitter = CreateEmitter ( observer ) NL observer . onSubscribe ( emitter ) NL try {  handle ( emitter ) NL } catch ( ex : Exception ) {  Exceptions . throwIfFatal ( ex ) NL emitter . onError ( ex ) NL } NL }","func_name":"subscribeActual","docstring":""}
{"repo":"rxcj","file":"observable_create.cj","path":"rxcj/src/rx/observable_create.cj","code_tokens":"public func onNext ( value : T ) {  if ( ! isDisposed ( ) ) {  downstream . onNext ( value ) NL } NL }","func_name":"onNext","docstring":""}
{"repo":"rxcj","file":"observable_create.cj","path":"rxcj/src/rx/observable_create.cj","code_tokens":"public func onError ( error : Exception ) {  if ( ! tryOnError ( error ) ) {  RxJavaPlugins . onError ( error ) NL } NL }","func_name":"onError","docstring":""}
{"repo":"rxcj","file":"observable_create.cj","path":"rxcj/src/rx/observable_create.cj","code_tokens":"public func tryOnError ( error : Exception ) : Bool {  if ( ! isDisposed ( ) ) {  try {  downstream . onError ( error ) NL } finally {  dispose ( ) NL } NL return true NL } NL return false NL }","func_name":"tryOnError","docstring":""}
{"repo":"rxcj","file":"observable_create.cj","path":"rxcj/src/rx/observable_create.cj","code_tokens":"public func onComplete ( ) {  if ( ! isDisposed ( ) ) {  try {  downstream . onComplete ( ) NL } finally {  dispose ( ) NL } NL } NL }","func_name":"onComplete","docstring":""}
{"repo":"rxcj","file":"observable_create.cj","path":"rxcj/src/rx/observable_create.cj","code_tokens":"public func dispose ( ) {  disposed = true NL }","func_name":"dispose","docstring":""}
{"repo":"rxcj","file":"observable_create.cj","path":"rxcj/src/rx/observable_create.cj","code_tokens":"public func isDisposed ( ) : Bool {  return disposed NL }","func_name":"isDisposed","docstring":""}
{"repo":"rxcj","file":"observable_emitter.cj","path":"rxcj/src/rx/observable_emitter.cj","code_tokens":"func onNext ( value : T ) : Unit","func_name":"onNext","docstring":""}
{"repo":"rxcj","file":"observable_emitter.cj","path":"rxcj/src/rx/observable_emitter.cj","code_tokens":"func onError ( error : Exception ) : Unit","func_name":"onError","docstring":""}
{"repo":"rxcj","file":"observable_emitter.cj","path":"rxcj/src/rx/observable_emitter.cj","code_tokens":"func tryOnError ( error : Exception ) : Bool","func_name":"tryOnError","docstring":""}
{"repo":"rxcj","file":"observable_emitter.cj","path":"rxcj/src/rx/observable_emitter.cj","code_tokens":"func onComplete ( ) : Unit","func_name":"onComplete","docstring":""}
{"repo":"rxcj","file":"basic_fuseable_observer.cj","path":"rxcj/src/rx/basic_fuseable_observer.cj","code_tokens":"public open func onSubscribe ( disposable : Disposable ) {  upstream = disposable NL downstream . onSubscribe ( this ) NL }","func_name":"onSubscribe","docstring":""}
{"repo":"rxcj","file":"basic_fuseable_observer.cj","path":"rxcj/src/rx/basic_fuseable_observer.cj","code_tokens":"public open func onError ( error : Exception ) {  if ( done ) {  RxJavaPlugins . onError ( error ) NL return NL } NL done = true NL downstream . onError ( error ) NL }","func_name":"onError","docstring":""}
{"repo":"rxcj","file":"basic_fuseable_observer.cj","path":"rxcj/src/rx/basic_fuseable_observer.cj","code_tokens":"public open func onComplete ( ) {  if ( done ) {  return NL } NL done = true NL downstream . onComplete ( ) NL }","func_name":"onComplete","docstring":""}
{"repo":"rxcj","file":"basic_fuseable_observer.cj","path":"rxcj/src/rx/basic_fuseable_observer.cj","code_tokens":"public open func dispose ( ) {  DisposableHeler . dispose ( upstream ) NL }","func_name":"dispose","docstring":""}
{"repo":"rxcj","file":"basic_fuseable_observer.cj","path":"rxcj/src/rx/basic_fuseable_observer.cj","code_tokens":"public open func isDisposed ( ) : Bool {  return DisposableHeler . isDisposed ( upstream ) NL }","func_name":"isDisposed","docstring":""}
{"repo":"rxcj","file":"basic_fuseable_observer.cj","path":"rxcj/src/rx/basic_fuseable_observer.cj","code_tokens":"protected func fail ( t : Exception ) {  Exceptions . throwIfFatal ( t ) NL DisposableHeler . dispose ( upstream ) NL onError ( t ) NL }","func_name":"fail","docstring":""}
{"repo":"rxcj","file":"observable.cj","path":"rxcj/src/rx/observable.cj","code_tokens":"public func subscribe ( onNext : ( T ) -> Unit ) : Disposable {  return subscribe ( onNext : onNext ) NL }","func_name":"subscribe","docstring":""}
{"repo":"rxcj","file":"observable.cj","path":"rxcj/src/rx/observable.cj","code_tokens":"public func subscribe ( onNext ! : ( T ) -> Unit , onError ! : ( ( Exception ) -> Unit ) = { error => RxJavaPlugins . onError ( OnErrorNotImplementedException ( error ) ) NL } , onComplete ! : ( ( ) -> Unit ) = { => ( ) NL } , onSubscribe ! : ( ( Disposable ) -> Unit ) = { d => ( ) NL } ) : Disposable {   let observer = LambdaObserver ( onNext , onError , onComplete , onSubscribe ) NL subscribe ( observer ) NL return observer NL }","func_name":"subscribe","docstring":""}
{"repo":"rxcj","file":"observable.cj","path":"rxcj/src/rx/observable.cj","code_tokens":"public func subscribe ( observer : Observer < T > ) {  try {  subscribeActual ( observer ) NL } catch ( e : Exception ) {  Exceptions . throwIfFatal ( e ) NL RxJavaPlugins . onError ( e ) NL throw e NL } NL }","func_name":"subscribe","docstring":""}
{"repo":"rxcj","file":"observable.cj","path":"rxcj/src/rx/observable.cj","code_tokens":"protected func subscribeActual ( observer : Observer < T > ) : Unit","func_name":"subscribeActual","docstring":""}
{"repo":"rxcj","file":"observable.cj","path":"rxcj/src/rx/observable.cj","code_tokens":"public func map < R > ( mapper : ( T ) -> R ) : Observable < R > {  return ObservableMap ( this , mapper ) NL }","func_name":"map","docstring":""}
{"repo":"rxcj","file":"observable.cj","path":"rxcj/src/rx/observable.cj","code_tokens":"static public func create < D > ( source : ( ObservableEmitter < D > ) -> Unit ) : Observable < D > {  return ObservableCreate ( source ) NL }","func_name":"create","docstring":""}
{"repo":"rxcj","file":"exceptions.cj","path":"rxcj/src/rx/exceptions/exceptions.cj","code_tokens":"static public func throwIfFatal ( e : Exception ) {  if ( e is Error ) {  throw e NL } NL }","func_name":"throwIfFatal","docstring":""}
{"repo":"rxcj","file":"rx_java_plugins.cj","path":"rxcj/src/rx/plugins/rx_java_plugins.cj","code_tokens":"static public func setErrorHandler ( handle : ( Exception ) -> Unit ) {  errorHandler = handle NL }","func_name":"setErrorHandler","docstring":""}
{"repo":"rxcj","file":"rx_java_plugins.cj","path":"rxcj/src/rx/plugins/rx_java_plugins.cj","code_tokens":"static public func onError ( error : Exception ) : Unit {  match ( errorHandler ) { case Some ( handle ) => try {  handle ( error ) NL return NL } catch ( e : Exception ) {  e . printStackTrace ( ) NL uncaught ( e ) NL } NL case None => ( ) NL } NL error . printStackTrace ( ) NL uncaught ( error ) NL }","func_name":"onError","docstring":""}
{"repo":"rxcj","file":"rx_java_plugins.cj","path":"rxcj/src/rx/plugins/rx_java_plugins.cj","code_tokens":"static private func uncaught ( error : Exception ) {  throw error NL }","func_name":"uncaught","docstring":""}
