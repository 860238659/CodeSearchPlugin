{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func next ( ) : Option < T > {  while ( true ) {  match ( it . next ( ) ) { case Some ( value ) => if ( predicate ( value ) ) {  return Some ( value ) NL } NL case _ => break NL } NL } NL return None NL }","func_name":"next","docstring":"/*\n     * Iterator next value\n     *\n     * @return Option<T> The return type of Option<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func iterator ( ) : Iterator < T > {  return this NL }","func_name":"iterator","docstring":"/*\n     * FilterIterator iterator\n     *\n     * @return Iterator<T> The return type of Iterator<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func next ( ) : Option < R > {  return match ( it . next ( ) ) { case Some ( value ) => Some ( transform ( value ) ) NL case _ => None NL } NL }","func_name":"next","docstring":"/*\n     * Iterator next value\n     *\n     * @return Option<T> The return type of Option<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func iterator ( ) : Iterator < R > {  return this NL }","func_name":"iterator","docstring":"/*\n     * FilterIterator iterator\n     *\n     * @return Iterator<T> The return type of Iterator<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func next ( ) : Option < R > {  while ( true ) {  match ( subIt ) { case Some ( rest ) => match ( rest . next ( ) ) { case Some ( v ) => return Some ( v ) NL case _ => ( ) NL } NL case _ => ( ) NL } NL match ( it . next ( ) ) { case Some ( sub ) => subIt = Some ( sub . iterator ( ) ) NL case _ => return None NL } NL } NL return None NL }","func_name":"next","docstring":"/*\n     * Iterator next value\n     *\n     * @return Option<T> The return type of Option<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func iterator ( ) : Iterator < R > {  return this NL }","func_name":"iterator","docstring":"/*\n     * FilterIterator iterator\n     *\n     * @return Iterator<T> The return type of Iterator<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func next ( ) : Option < R > {  while ( true ) {  match ( subIt ) { case Some ( rest ) => match ( rest . next ( ) ) { case Some ( v ) => return Some ( v ) NL case _ => ( ) NL } NL case _ => ( ) NL } NL match ( it . next ( ) ) { case Some ( sub ) => subIt = Some ( transform ( sub ) . iterator ( ) ) NL case _ => return None NL } NL } NL return None NL }","func_name":"next","docstring":"/*\n     * Iterator next value\n     *\n     * @return Option<T> The return type of Option<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func iterator ( ) : Iterator < R > {  return this NL }","func_name":"iterator","docstring":"/*\n     * FilterIterator iterator\n     *\n     * @return Iterator<T> The return type of Iterator<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func next ( ) : Option < T > {  if ( itOver ) {  return other . next ( ) NL } NL match ( it . next ( ) ) { case Some ( value ) => return Some ( value ) NL case _ => itOver = true NL return other . next ( ) NL } NL }","func_name":"next","docstring":"/*\n     * Iterator next value\n     *\n     * @return Option<T> The return type of Option<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func iterator ( ) : Iterator < T > {  return this NL }","func_name":"iterator","docstring":"/*\n     * FilterIterator iterator\n     *\n     * @return Iterator<T> The return type of Iterator<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func next ( ) : Option < T > {  while ( count > 0 ) {  match ( it . next ( ) ) { case None => return None NL case _ => count -- NL } NL } NL return it . next ( ) NL }","func_name":"next","docstring":"/*\n     * Iterator next value\n     *\n     * @return Option<T> The return type of Option<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func iterator ( ) : Iterator < T > {  return this NL }","func_name":"iterator","docstring":"/*\n     * FilterIterator iterator\n     *\n     * @return Iterator<T> The return type of Iterator<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func next ( ) : Option < T > {  if ( count == 0 ) {  return None NL } NL count -- NL return it . next ( ) NL }","func_name":"next","docstring":"/*\n     * Iterator next value\n     *\n     * @return Option<T> The return type of Option<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func iterator ( ) : Iterator < T > {  return this NL }","func_name":"iterator","docstring":"/*\n     * FilterIterator iterator\n     *\n     * @return Iterator<T> The return type of Iterator<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func next ( ) : Option < T > {  while ( true ) {  match ( it . next ( ) ) { case Some ( v ) => if ( index < count ) {  index ++ NL continue NL } NL index = 1 NL return Some ( v ) NL case None => break NL } NL } NL return None NL }","func_name":"next","docstring":"/*\n     * Iterator next value\n     *\n     * @return Option<T> The return type of Option<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func iterator ( ) : Iterator < T > {  return this NL }","func_name":"iterator","docstring":"/*\n     * FilterIterator iterator\n     *\n     * @return Iterator<T> The return type of Iterator<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func next ( ) : Option < ( T , R ) > {  match ( ( itt . next ( ) , itr . next ( ) ) ) { case ( Some ( t ) , Some ( r ) ) => return Some ( ( t , r ) ) NL case _ => return None NL } NL }","func_name":"next","docstring":"/*\n     * Iterator next value\n     *\n     * @return Option<T> The return type of Option<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func iterator ( ) : Iterator < ( T , R ) > {  return this NL }","func_name":"iterator","docstring":"/*\n     * FilterIterator iterator\n     *\n     * @return Iterator<T> The return type of Iterator<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func next ( ) : Option < ( Int64 , T ) > {  return match ( it . next ( ) ) { case Some ( value ) => index ++ NL Some ( ( index , value ) ) NL case _ => return None NL } NL }","func_name":"next","docstring":"/*\n     * Iterator next value\n     *\n     * @return Option<T> The return type of Option<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func iterator ( ) : Iterator < ( Int64 , T ) > {  return this NL }","func_name":"iterator","docstring":"/*\n     * FilterIterator iterator\n     *\n     * @return Iterator<T> The return type of Iterator<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func withIndex < T > ( it : Iterable < T > ) : Iterator < ( Int64 , T ) > {  return WithIndexIterator < T > ( it ) NL }","func_name":"withIndex","docstring":"/**\n * This func withIndex returns an Iterator with index.\n *\n * @param it This is an Iterable.\n * @return Iterator<Int64*T> An Iterator with index.\n *\n * @since 0.28.4\n */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func filter < T > ( predicate : ( T ) -> Bool , it : Iterable < T > ) : Iterator < T > {  return FilterIterator < T > ( it , predicate ) NL }","func_name":"filter","docstring":"/**\n * This func filter is used to filter Iterator<T>.\n *\n * @param predicate Filter conditions.\n * @param it This is an Iterable.\n * @return Iterator<T>, an Iterator consisting of filter elements.\n *\n * @since 0.28.4\n */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func map < T , R > ( transform : ( T ) -> R , it : Iterable < T > ) : Iterator < R > {  return MapIterator < T , R > ( it , transform ) NL }","func_name":"map","docstring":"/**\n * This func map is used to Convert Iterable<T> to Iterator<R>.\n *\n * @param transform The callback function, that converts T to R.\n * @param it This is an Iterable.\n * @return Iterator<R>, an Iterator consisting of transformed R's.\n *\n * @since 0.28.4\n */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func flatten < T , R > ( it : Iterable < T > ) : Iterator < R > where T <: Iterable < R > {  return FlattenIterator < T , R > ( it ) NL }","func_name":"flatten","docstring":"/**\n * This func flatten is used to flatten Iterator.\n *\n * @param it This is an Iterable.\n * @return Iterator<R>, an Iterator consisting of flatten T's.\n *\n * @since 0.28.4\n */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func flatMap < T , R > ( transform : ( T ) -> Iterable < R > , it : Iterable < T > ) : Iterator < R > {  return FlatMapIterator < T , R > ( it , transform ) NL }","func_name":"flatMap","docstring":"/**\n * This func flatMap is used to map and flatten Iterator.\n *\n * @param transform The callback function, that converts T to Iterable<R>.\n * @param it This is an Iterable.\n * @return Iterator<R>, an Iterator consisting of flatten Iterable<R>'s.\n *\n * @since 0.28.4\n */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func zip < T , R > ( it : Iterable < T > , other : Iterable < R > ) : Iterator < ( T , R ) > {  return ZipIterator < T , R > ( it , other ) NL }","func_name":"zip","docstring":"/**\n * This func zip is used to zip two Iterables into one (mainly the short one).\n *\n * @param it This is an Iterable.\n * @param other This is an Iterable.\n * @return Iterator<T*R>, a Iterator after the zipping.\n *\n * @since 0.28.4\n */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func concat < T > ( it : Iterable < T > , other : Iterable < T > ) : Iterator < T > {  return ConcatIterator < T > ( it , other ) NL }","func_name":"concat","docstring":"/**\n * This func concat is used to concat two Iterables into one.\n *\n * @param it This is an Iterable.\n * @param other This is an Iterable.\n * @return Iterator<T>, a Iterator after the concatenating.\n *\n * @since 0.28.4\n */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func skip < T > ( count : Int64 , it : Iterable < T > ) : Iterator < T > {  return SkipIterator < T > ( it , count ) NL }","func_name":"skip","docstring":"/**\n * This func skip is used to skip count in Iterable<T>.\n *\n * @param count This is an Int64,number of skip.\n * @param it This is an Iterable.\n * @return Iterator<T>, a Iterable.\n *\n * @since 0.28.4\n */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func limit < T > ( count : Int64 , it : Iterable < T > ) : Iterator < T > {  return LimitIterator < T > ( it , count ) NL }","func_name":"limit","docstring":"/**\n * This func limit is used to limit count in Iterable<T>.\n *\n * @param count This is an Int64,number of limit.\n * @param it This is an Iterable.\n * @return Iterator<T>, a Iterable.\n *\n * @since 0.28.4\n */"}
{"repo":"collection-extension","file":"middle_handle.cj","path":"collection-extension/src/middle_handle.cj","code_tokens":"public func step < T > ( count : Int64 , it : Iterable < T > ) : Iterator < T > {  return StepIterator < T > ( it , count ) NL }","func_name":"step","docstring":"/**\n * This func step is used to step count in Iterable<T>.\n *\n * @param count This is an Int64, number of step.\n * @param it This is an Iterable.\n * @return Iterator<T>, a Iterable.\n *\n * @since 0.28.4\n */"}
{"repo":"collection-extension","file":"stack.cj","path":"collection-extension/src/stack.cj","code_tokens":"public func next ( ) : Option < T > {  if ( initVersion != myData . version ( ) ) {  println ( oncurrentModificationException ) NL return None NL } NL myPosition ++ NL return myData . get ( myPosition ) NL }","func_name":"next","docstring":"/*\n     * Gets the value of the next index\n     *\n     * @return Option<T> Return value\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"stack.cj","path":"collection-extension/src/stack.cj","code_tokens":"public func iterator ( ) : Iterator < T > {  return this NL }","func_name":"iterator","docstring":"/*\n     * Stack iterator\n     *\n     * @return The return type of Iterator<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"stack.cj","path":"collection-extension/src/stack.cj","code_tokens":"public func isEmpty ( ) : Bool {  mySize == 0 NL }","func_name":"isEmpty","docstring":"/**\n     * Judge whether the stack is empty\n     *\n     * @return Bool The return type of Bool\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"stack.cj","path":"collection-extension/src/stack.cj","code_tokens":"public func peek ( ) : Option < T > {  myStack . get ( mySize - 1 ) NL }","func_name":"peek","docstring":"/**\n     * Get the top element of stack\n     *\n     *\n     * @return Option<T> Return value\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"stack.cj","path":"collection-extension/src/stack.cj","code_tokens":"public func pop ( ) : Option < T > {   let ret = myStack . get ( mySize - 1 ) NL myStack . remove ( mySize - 1 ) NL mySize -- NL ret NL }","func_name":"pop","docstring":"/**\n     * Remove last element\n     *\n     * @return Option<T> Return Remove element\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"stack.cj","path":"collection-extension/src/stack.cj","code_tokens":"public func push ( element : T ) : Unit {  myStack . insert ( mySize , element ) NL mySize ++ NL }","func_name":"push","docstring":"/**\n     * Add an element to the end of the stack\n     *\n     * @param element Add element\n     *\n     * @return The return type of Unit\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"stack.cj","path":"collection-extension/src/stack.cj","code_tokens":"public func clone ( ) : Stack < T > {  return Stack < T > ( this ) NL }","func_name":"clone","docstring":"/**\n     * Clone stack\n     *\n     * @return Stack<T> The return type of Stack<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"stack.cj","path":"collection-extension/src/stack.cj","code_tokens":"public func iterator ( ) : Iterator < T > {  return StackIterator < T > ( this . myStack ) NL }","func_name":"iterator","docstring":"/*\n     * Stack iterator\n     *\n     * @return The return type of Iterator<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"end_handle.cj","path":"collection-extension/src/end_handle.cj","code_tokens":"public func reduce < T , R > ( initial : R , operation : ( R , T ) -> R , it : Iterable < T > ) : R {   var result : R = initial NL for ( v in it ) {  result = operation ( result , v ) NL } NL return result NL }","func_name":"reduce","docstring":"/**\r\n * This func reduce is calculated from left to right using the specified initial value.\r\n *\r\n * @param initial This is initial value.\r\n * @param operation This is the callback function that executes each value in Iterator.\r\n * @param it This is an Iterable.\r\n * @return R The calculation results.\r\n *\r\n * @since 0.28.4\r\n */"}
{"repo":"collection-extension","file":"end_handle.cj","path":"collection-extension/src/end_handle.cj","code_tokens":"public func fold < T , R > ( initial : R , operation : ( T , R ) -> R , it : Iterable < T > ) : R {   let rest : ArrayList < T > = bufferOf < T > ( it ) NL  var result : R = initial NL  var end = rest . size - 1 NL for ( i in end ..= 0 : - 1 ) {  result = operation ( rest [ i ] , result ) NL } NL return result NL }","func_name":"fold","docstring":"/**\r\n * This func fold is calculated from right to left using the specified initial value.\r\n *\r\n * @param initial This is initial value.\r\n * @param operation This is the callback function that executes each value in Iterator.\r\n * @param it This is an Iterable.\r\n * @return R The calculation results.\r\n *\r\n * @since 0.28.4\r\n */"}
{"repo":"collection-extension","file":"end_handle.cj","path":"collection-extension/src/end_handle.cj","code_tokens":"public func isEmpty < T > ( it : Iterable < T > ) : Bool {  return match ( it . iterator ( ) . next ( ) ) { case None => true NL case _ => false NL } NL }","func_name":"isEmpty","docstring":"/**\r\n * This func isEmpty is used to check whether Iterable<T> is empty.\r\n *\r\n * @param it This is an Iterable.\r\n * @return Bool Whether the Iterable is empty\r\n *\r\n * @since 0.28.4\r\n */"}
{"repo":"collection-extension","file":"end_handle.cj","path":"collection-extension/src/end_handle.cj","code_tokens":"public func count < T > ( it : Iterable < T > ) : Int64 {   var count : Int64 = 0 NL for ( _ in it ) {  count ++ NL } NL return count NL }","func_name":"count","docstring":"/**\r\n * This func count is used to number of statistics of Iterable<T>.\r\n *\r\n * @param it This is an Iterable.\r\n * @return Bool The number of Iterable statistics\r\n *\r\n * @since 0.28.4\r\n */"}
{"repo":"collection-extension","file":"end_handle.cj","path":"collection-extension/src/end_handle.cj","code_tokens":"public func max < T > ( it : Iterable < T > ) : Option < T > where T <: Comparable < T > {   var rest : Option < T > = None NL for ( item in it ) {  match ( rest ) { case Some ( value ) => if ( item > value ) {  rest = Some ( item ) NL } NL case _ => rest = Some ( item ) NL } NL } NL return rest NL }","func_name":"max","docstring":"/**\r\n * This func max is used to searches for the maximum value of Iterable<T>.\r\n *\r\n * @param it This is an Iterable.\r\n * @return T The maximum value.\r\n *\r\n * @since 0.28.4\r\n */"}
{"repo":"collection-extension","file":"end_handle.cj","path":"collection-extension/src/end_handle.cj","code_tokens":"public func min < T > ( it : Iterable < T > ) : Option < T > where T <: Comparable < T > {   var rest : Option < T > = None NL for ( item in it ) {  match ( rest ) { case Some ( value ) => if ( item < value ) {  rest = Some ( item ) NL } NL case _ => rest = Some ( item ) NL } NL } NL return rest NL }","func_name":"min","docstring":"/**\r\n * This func min is used to searches for the minimum value of Iterable<T>.\r\n *\r\n * @param it This is an Iterable.\r\n * @return T The minimum value.\r\n *\r\n * @since 0.28.4\r\n */"}
{"repo":"collection-extension","file":"end_handle.cj","path":"collection-extension/src/end_handle.cj","code_tokens":"public func all < T > ( predicate : ( T ) -> Bool , it : Iterable < T > ) : Bool {  for ( item in it ) {  if ( ! predicate ( item ) ) {  return false NL } NL } NL return true NL }","func_name":"all","docstring":"/**\r\n * This func all is used to check whether all elements pass the test.\r\n *\r\n * @param predicate The function used to test each element.\r\n * @param it This is an Iterable.\r\n * @return Bool The test results.\r\n *\r\n * @since 0.28.4\r\n */"}
{"repo":"collection-extension","file":"end_handle.cj","path":"collection-extension/src/end_handle.cj","code_tokens":"public func any < T > ( predicate : ( T ) -> Bool , it : Iterable < T > ) : Bool {  for ( item in it ) {  if ( predicate ( item ) ) {  return true NL } NL } NL return false NL }","func_name":"any","docstring":"/**\r\n * This func any is used to check that at least one element passes the test.\r\n *\r\n * @param predicate The function used to test each element.\r\n * @param it This is an Iterable.\r\n * @return Bool The test results.\r\n *\r\n * @since 0.28.4\r\n */"}
{"repo":"collection-extension","file":"end_handle.cj","path":"collection-extension/src/end_handle.cj","code_tokens":"public func none < T > ( predicate : ( T ) -> Bool , it : Iterable < T > ) : Bool {  for ( item in it ) {  if ( predicate ( item ) ) {  return false NL } NL } NL return true NL }","func_name":"none","docstring":"/**\r\n * This func none is used to check whether all elements fail the test.\r\n *\r\n * @param predicate The function used to test each element.\r\n * @param it This is an Iterable.\r\n * @return Bool The test results.\r\n *\r\n * @since 0.28.4\r\n */"}
{"repo":"collection-extension","file":"end_handle.cj","path":"collection-extension/src/end_handle.cj","code_tokens":"public func first < T > ( it : Iterable < T > ) : Option < T > {  return it . iterator ( ) . next ( ) NL }","func_name":"first","docstring":"/**\r\n * This func first is used to get the first element of the Iterator.\r\n *\r\n * @param it This is an Iterable.\r\n * @return Option<T> The first element.\r\n *\r\n * @since 0.28.4\r\n */"}
{"repo":"collection-extension","file":"end_handle.cj","path":"collection-extension/src/end_handle.cj","code_tokens":"public func last < T > ( it : Iterable < T > ) : Option < T > {   var rest : Option < T > = None NL for ( item in it ) {  rest = Some ( item ) NL } NL return rest NL }","func_name":"last","docstring":"/**\r\n * This func last is used to get the last element of the Iterator.\r\n *\r\n * @param it This is an Iterable.\r\n * @return Option<T> The last element.\r\n *\r\n * @since 0.28.4\r\n*/"}
{"repo":"collection-extension","file":"end_handle.cj","path":"collection-extension/src/end_handle.cj","code_tokens":"public func at < T > ( n : Int64 , it : Iterable < T > ) : Option < T > {   var i : Int64 = 0 NL for ( item in it ) {  if ( i == n ) {  return Some ( item ) NL } NL i ++ NL } NL return None NL }","func_name":"at","docstring":"/**\r\n * This func at function is used to get the specified index element of the iterator.\r\n *\r\n * @param n The specified index.\r\n * @param it This is an Iterable.\r\n * @return Option<T> The specified index element.\r\n *\r\n * @since 0.28.4\r\n*/"}
{"repo":"collection-extension","file":"end_handle.cj","path":"collection-extension/src/end_handle.cj","code_tokens":"public func forEach < T > ( action : ( T ) -> Unit , it : Iterable < T > ) : Unit {  for ( item in it ) {  action ( item ) NL } NL }","func_name":"forEach","docstring":"/**\r\n * This func forEach function is used to perform a specific function on each element of Iterable.\r\n *\r\n * @param action The function executed by each element.\r\n * @param it This is an Iterable.\r\n *\r\n * @since 0.28.4\r\n */"}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"public func isEmpty ( ) : Bool {  mySize == 0 NL }","func_name":"isEmpty","docstring":"/**\n     * Judge LinkedList whether it is empty\n     *\n     * @return Bool The return type of Bool\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"public func iterator ( ) : Iterator < T > {  LinkedListIterator ( first ) NL }","func_name":"iterator","docstring":"/**\n     * LinkedList iterator\n     *\n     * @return Iterator The return type of Iterator<T>\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"public func getFirst ( ) : T {  match ( first ) { case Some ( v ) => v . value NL case _ => throw IndexOutOfBoundsException ( ) NL } NL }","func_name":"getFirst","docstring":"/**\n     * Get LinkedList first value.\n     *\n     * @return T The return type of T\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"public func getLast ( ) : T {  match ( last ) { case Some ( v ) => v . value NL case _ => throw IndexOutOfBoundsException ( ) NL } NL }","func_name":"getLast","docstring":"/**\n     * Get LinkedList last value.\n     *\n     * @return T The return type of T\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"public func get ( index : Int ) : T {  if ( index < 0 || index > = mySize ) {  throw IndexOutOfBoundsException ( ) NL } NL match ( at ( index ) ) { case Some ( v ) => v . value NL case _ => throw IndexOutOfBoundsException ( ) NL } NL }","func_name":"get","docstring":"/**\n     * Gets the value of the specified index\n     *\n     * @param index LinkedList index\n     *\n     * @return T Return value\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"public func set ( index : Int , element : T ) : T {  if ( index < 0 || index > = mySize ) {  throw IndexOutOfBoundsException ( ) NL } NL match ( at ( index ) ) { case Some ( v ) =>  let oldValue = v . value NL v . value = element NL oldValue NL case _ => throw IndexOutOfBoundsException ( ) NL } NL }","func_name":"set","docstring":"/**\n     * Replace element at specified location\n     *\n     * @param index Specified location index\n     * @param element Specified location value\n     *\n     * @return T The return type of T\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"public func prepend ( element : T ) : Unit {  linkFirst ( element ) NL }","func_name":"prepend","docstring":"/**\n     * Append element before\n     *\n     * @param element Append element\n     *\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"public func append ( element : T ) : Unit {  linkLast ( element ) NL }","func_name":"append","docstring":"/**\n     * Append element after\n     *\n     * @param element Append element\n     *\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"public func insert ( index : Int , element : T ) : Unit {  if ( index < 0 || index > mySize ) {  throw IndexOutOfBoundsException ( ) NL } NL if ( index == 0 ) {  linkFirst ( element ) NL } else {  linkBefore ( element , at ( index ) ) NL } NL }","func_name":"insert","docstring":"/**\n     * Inserts an element at the specified location\n     *\n     * @param index Specified location index\n     * @param element Insert element\n     *\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"public func remove ( index : Int ) : T {  if ( index < 0 || index > = mySize ) {  throw IndexOutOfBoundsException ( ) NL } NL match ( at ( index ) ) { case Some ( v ) => unlink ( v ) NL case _ => throw IndexOutOfBoundsException ( ) NL } NL }","func_name":"remove","docstring":"/**\n     * Removes the element at the specified location\n     *\n     * @param index Specified location index\n     *\n     * @return T The return type of T\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"public func removeFirst ( ) : T {  match ( first ) { case Some ( v ) => unlinkFirst ( v ) NL case _ => throw IndexOutOfBoundsException ( ) NL } NL }","func_name":"removeFirst","docstring":"/**\n     * Remove first element\n     *\n     * @return The return type of T\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"public func removeLast ( ) : T {  match ( last ) { case Some ( v ) => unlinkLast ( v ) NL case _ => throw IndexOutOfBoundsException ( ) NL } NL }","func_name":"removeLast","docstring":"/**\n     * Remove last element\n     *\n     *\n     * @return The return type of T\n     * @since 0.28.4\n     */"}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"private func at ( index : Int ) : ? Node < T > {  if ( index < ( mySize >> 1 ) ) {   var x = first NL for ( i in 0 .. index ) {  match ( x ) { case Some ( v ) => x = v . next NL case _ => ( ) NL } NL } NL x NL } else {   var x = last NL  var i = mySize - 1 NL while ( i > index ) {  match ( x ) { case Some ( v ) => x = v . prev NL case _ => ( ) NL } NL i -- NL } NL x NL } NL }","func_name":"at","docstring":""}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"private func linkFirst ( element : T ) : Unit {   let first = this . first NL  let newNode = Node ( prev : None < Node < T > > , value : element , next : first ) NL this . first = newNode NL match ( first ) { case Some ( v ) => v . prev = newNode NL case _ => last = newNode NL } NL mySize ++ NL }","func_name":"linkFirst","docstring":""}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"private func linkLast ( element : T ) : Unit {   let last = this . last NL  let newNode = Node ( prev : last , value : element , next : None < Node < T > > ) NL this . last = newNode NL match ( last ) { case Some ( v ) => v . next = newNode NL case _ => first = newNode NL } NL mySize ++ NL }","func_name":"linkLast","docstring":""}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"private func linkBefore ( element : T , succ : ? Node < T > ) : Unit {  match ( succ ) { case Some ( v ) =>  let pred = v . prev NL  let newNode = Node ( prev : pred , value : element , next : succ ) NL v . prev = newNode NL match ( pred ) { case Some ( v2 ) => v2 . next = newNode NL case _ => first = newNode NL } NL mySize ++ NL case _ => ( ) NL } NL }","func_name":"linkBefore","docstring":""}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"private func unlinkFirst ( x : Node < T > ) : T {   let element = x . value NL  let next = x . next NL x . next = None NL this . first = next NL match ( next ) { case Some ( v ) => v . prev = None NL case _ => last = None NL } NL mySize -- NL element NL }","func_name":"unlinkFirst","docstring":""}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"private func unlinkLast ( x : Node < T > ) : T {   let element = x . value NL  let prev = x . prev NL x . prev = None NL this . last = prev NL match ( prev ) { case Some ( v ) => v . next = None NL case _ => first = None NL } NL mySize -- NL element NL }","func_name":"unlinkLast","docstring":""}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"private func unlink ( x : Node < T > ) : T {   let element = x . value NL  let next = x . next NL  let prev = x . prev NL match ( prev ) { case Some ( v ) => v . next = next NL x . prev = None NL case _ => first = next NL } NL match ( next ) { case Some ( v ) => v . prev = prev NL x . next = None NL case _ => last = prev NL } NL mySize -- NL element NL }","func_name":"unlink","docstring":""}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"public func next ( ) : ? T {  match ( current ) { case Some ( v ) =>  let element = v . value NL current = v . next NL element NL case _ => None NL } NL }","func_name":"next","docstring":""}
{"repo":"collection-extension","file":"linked_list.cj","path":"collection-extension/src/linked_list.cj","code_tokens":"public func iterator ( ) : Iterator < T > {  this NL }","func_name":"iterator","docstring":"/**\n     * LinkedList iterator\n     *\n     * @return Iterator The return type of Iterator<T>\n     * @since 0.28.4\n     */"}
