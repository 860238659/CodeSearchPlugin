{"repo":"cj-cache","file":"number.cj","path":"cj-cache/src/cache/number.cj","code_tokens":"public func IncrementInt8 ( k : String , n : T ) : Option < T > {  synchronized ( this . mu ) {  if ( this . items . contains ( k ) ) {   var item = this . items [ k ] NL if ( item . Expired ( ) ) {  return None NL } NL  let num : Int8 = item . Data + n NL  let x : ? T = num as T NL this . items [ k ] = Item < T > ( x ?? n , item . Expiration ) NL return x NL } else {  return None NL } NL } NL }","func_name":"IncrementInt8","docstring":"/**\n     * Int8 auto increment\n     *\n     * @param k key\n     * @param n Increment number\n     *\n     * @return Option<T> Return result\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"number.cj","path":"cj-cache/src/cache/number.cj","code_tokens":"public func IncrementInt16 ( k : String , n : T ) : Option < T > {  synchronized ( this . mu ) {  if ( this . items . contains ( k ) ) {   var item = this . items [ k ] NL if ( item . Expired ( ) ) {  return None NL } NL  let num : Int16 = item . Data + n NL  let x : ? T = num as T NL this . items [ k ] = Item < T > ( x ?? n , item . Expiration ) NL return x NL } else {  return None NL } NL } NL }","func_name":"IncrementInt16","docstring":"/**\n     * Int16 auto increment\n     *\n     * @param k key\n     * @param n Increment number\n     *\n     * @return Option<T> Return result\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"number.cj","path":"cj-cache/src/cache/number.cj","code_tokens":"public func IncrementInt32 ( k : String , n : T ) : Option < T > {  synchronized ( this . mu ) {  if ( this . items . contains ( k ) ) {   var item = this . items [ k ] NL if ( item . Expired ( ) ) {  return None NL } NL  let num : Int32 = item . Data + n NL  let x : ? T = num as T NL this . items [ k ] = Item < T > ( x ?? n , item . Expiration ) NL return x NL } else {  return None NL } NL } NL }","func_name":"IncrementInt32","docstring":"/**\n     * Int32 auto increment\n     *\n     * @param k key\n     * @param n Increment number\n     *\n     * @return Option<T> Return result\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"number.cj","path":"cj-cache/src/cache/number.cj","code_tokens":"public func Increment ( k : String , n : T ) : Option < T > {  synchronized ( this . mu ) {  if ( this . items . contains ( k ) ) {   var item = this . items [ k ] NL if ( item . Expired ( ) ) {  return None NL } NL  let num : Int64 = item . Data + n NL  let x : ? T = num as T NL this . items [ k ] = Item < T > ( x ?? n , item . Expiration ) NL return x NL } else {  return None NL } NL } NL }","func_name":"Increment","docstring":"/**\n     * Int64 auto increment\n     *\n     * @param k key\n     * @param n Increment number\n     *\n     * @return Option<T> Return result\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"number.cj","path":"cj-cache/src/cache/number.cj","code_tokens":"public func DecrementInt8 ( k : String , n : T ) : Option < T > {  synchronized ( this . mu ) {  if ( this . items . contains ( k ) ) {   var item = this . items [ k ] NL if ( item . Expired ( ) ) {  return None NL } NL  let num : Int8 = item . Data - n NL  let x : ? T = num as T NL this . items [ k ] = Item < T > ( x ?? n , item . Expiration ) NL return x NL } else {  return None NL } NL } NL }","func_name":"DecrementInt8","docstring":"/**\n     * Int8 auto decrement\n     *\n     * @param k key\n     * @param n Increment number\n     *\n     * @return Option<T> Return result\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"number.cj","path":"cj-cache/src/cache/number.cj","code_tokens":"public func DecrementInt16 ( k : String , n : T ) : Option < T > {  synchronized ( this . mu ) {  if ( this . items . contains ( k ) ) {   var item = this . items [ k ] NL if ( item . Expired ( ) ) {  return None NL } NL  let num : Int16 = item . Data - n NL  let x : ? T = num as T NL this . items [ k ] = Item < T > ( x ?? n , item . Expiration ) NL return x NL } else {  return None NL } NL } NL }","func_name":"DecrementInt16","docstring":"/**\n     * Int16 auto decrement\n     *\n     * @param k key\n     * @param n Increment number\n     *\n     * @return Option<T> Return result\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"number.cj","path":"cj-cache/src/cache/number.cj","code_tokens":"public func DecrementInt32 ( k : String , n : T ) : Option < T > {  synchronized ( this . mu ) {  if ( this . items . contains ( k ) ) {   var item = this . items [ k ] NL if ( item . Expired ( ) ) {  return None NL } NL  let num : Int32 = item . Data - n NL  let x : ? T = num as T NL this . items [ k ] = Item < T > ( x ?? n , item . Expiration ) NL return x NL } else {  return None NL } NL } NL }","func_name":"DecrementInt32","docstring":"/**\n     * Int32 auto decrement\n     *\n     * @param k key\n     * @param n Increment number\n     *\n     * @return Option<T> Return result\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"number.cj","path":"cj-cache/src/cache/number.cj","code_tokens":"public func Decrement ( k : String , n : T ) : Option < T > {  synchronized ( this . mu ) {  if ( this . items . contains ( k ) ) {   var item = this . items [ k ] NL if ( item . Expired ( ) ) {  return None NL } NL  let num : Int64 = item . Data - n NL  let x : ? T = num as T NL this . items [ k ] = Item < T > ( x ?? n , item . Expiration ) NL return x NL } else {  return None NL } NL } NL }","func_name":"Decrement","docstring":"/**\n     * Int64 auto decrement\n     *\n     * @param k key\n     * @param n Increment number\n     *\n     * @return Option<T> Return result\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func Expired ( ) : Bool {  if ( this . Expiration == 0 ) {  return false NL } NL return Time . now ( ) . unixNano ( ) > this . Expiration NL }","func_name":"Expired","docstring":"/*\n     * Determine whether it is expired\n     *\n     * @return Bool \n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func serialize ( ) : DataModel {  return DataModelStruct ( ) . add ( field < T > ( data , this . Data ) ) . add ( field < Int64 > ( expiration , this . Expiration ) ) NL }","func_name":"serialize","docstring":"/**\n     * Change the data serialization\n     *\n     * @return DataModel The return type of DataModel\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"static public func deserialize ( dm : DataModel ) : Item < T > {   var dms = match ( dm ) { case data : DataModelStruct => data NL case _ => throw Exception ( this data is not DataModelStruct ) NL } NL  let expiration = Int64 . deserialize ( dms . get ( expiration ) ) NL  let data = T . deserialize ( dms . get ( data ) ) NL return Item ( data , expiration ) NL }","func_name":"deserialize","docstring":"/**\n     * DataModel deserialize\n     *\n     * @param dm DataModel\n     *\n     * @return Item The return type of Item<T>\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func Set ( k : String , v : T , d ! : Duration = DefaultExpiration ) {   var d1 = d NL  var e : Int64 = 0 NL if ( d1 == DefaultExpiration ) {  d1 = this . defaultExpiration NL } NL if ( d1 > Duration . nanosecond ( 0 ) ) {  e = ( Time . now ( ) + d1 ) . unixNano ( ) NL } NL synchronized ( this . mu ) {  this . items . put ( k , Item < T > ( v , e ) ) NL } NL }","func_name":"Set","docstring":"/**\n     * Set the value without checking whether it already exists\n     *\n     * @param k Set the value\n     * @param v String value\n     * @param d Set defaultExpiration if not filled in\n     *\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"private func set ( k : String , v : T , d ! : Duration = DefaultExpiration ) {   var d1 = d NL  var e : Int64 = 0 NL if ( d1 == DefaultExpiration ) {  d1 = this . defaultExpiration NL } NL if ( d1 > Duration . nanosecond ( 0 ) ) {  e = ( Time . now ( ) + d1 ) . unixNano ( ) NL } NL this . items . put ( k , Item < T > ( v , e ) ) NL }","func_name":"set","docstring":""}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func SetDefault ( k : String , v : T ) {  this . Set ( k , v ) NL }","func_name":"SetDefault","docstring":"/**\n     * Add items to the cache using the default expiration time, replacing any existing items.\n     *\n     * @param k Set the value\n     * @param v String value\n     *\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"private func has ( k : String ) : Bool {  if ( this . items . contains ( k ) ) {   let v = this . items [ k ] NL if ( v . Expiration > 0 ) {  if ( Time . now ( ) . unixNano ( ) > v . Expiration ) {  return false NL } NL } NL return true NL } else {  return false NL } NL }","func_name":"has","docstring":""}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func Add ( k : String , v : T , d ! : Duration = DefaultExpiration ) : Bool {  synchronized ( this . mu ) {  if ( this . has ( k ) ) {  return false NL } else {  this . set ( k , v , d : d ) NL return true NL } NL } NL }","func_name":"Add","docstring":"/**\n     * Adding a value will check whether the value exists. If it exists, an error will be returned\n     *\n     * @param k Set the value\n     * @param v String value\n     * @param d Set defaultExpiration if not filled in\n     *\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func Replace ( k : String , v : T , d ! : Duration = DefaultExpiration ) : Bool {  synchronized ( this . mu ) {  if ( this . has ( k ) ) {  this . set ( k , v , d : d ) NL return true NL } else {  return false NL } NL } NL }","func_name":"Replace","docstring":"/**\n     * Replace cached values\n     *\n     * @param k Set the value\n     * @param v String value\n     * @param d Set defaultExpiration if not filled in\n     *\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func Get ( k : String ) : Option < T > {  synchronized ( this . mu ) {  if ( this . items . contains ( k ) ) {   let v = this . items [ k ] NL if ( v . Expiration > 0 ) {  if ( Time . now ( ) . unixNano ( ) > v . Expiration ) {  return None NL } NL } NL return v . Data NL } else {  return None NL } NL } NL }","func_name":"Get","docstring":"/**\n     * Get a value\n     *\n     * @param k The value\n     *\n     * @return Option<T> The return type of Option<T>\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func GetWithExpiration ( k : String ) : Option < ( T , Int64 ) > {  synchronized ( this . mu ) {  if ( this . items . contains ( k ) ) {   let v = this . items [ k ] NL if ( v . Expiration > 0 ) {  if ( Time . now ( ) . unixNano ( ) > v . Expiration ) {  return None NL } NL return ( v . Data , v . Expiration ) NL } NL return ( v . Data , 0 ) NL } else {  return None NL } NL } NL }","func_name":"GetWithExpiration","docstring":"/**\n     * Get value and expiration time\n     *\n     * @param k The value\n     *\n     * @return Option<T*Int64> The return type of Option<T>\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"private func delete ( k : String ) : Option < T > {  if ( this . items . contains ( k ) ) {   let v = this . items [ k ] NL this . items . remove ( k ) NL this . onEvicted ? ( k , v . Data ) NL return v . Data NL } else {  return None NL } NL }","func_name":"delete","docstring":""}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func Delete ( k : String ) {  synchronized ( this . mu ) {  this . delete ( k ) NL } NL }","func_name":"Delete","docstring":"/**\n     * Delete an item\n     *\n     * @param k The value\n     *\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func DeleteExpired ( ) {   var evictedItems = ArrayList < KeyValue < T > > ( ) NL  let now = Time . now ( ) . unixNano ( ) NL synchronized ( this . mu ) {   var keys = ArrayList < String > ( ) NL for ( ( k , item ) in this . items ) {  if ( item . Expiration > 0 && now > item . Expiration ) {  keys . append ( k ) NL } NL } NL for ( key in keys ) {   let r = this . delete ( key ) NL match ( r ) { case None => ( ) NL case Some ( ov ) => evictedItems . append ( KeyValue < T > ( key , ov ) ) NL } NL } NL } NL for ( item in evictedItems ) {  this . onEvicted ? ( item . key , item . value ) NL } NL }","func_name":"DeleteExpired","docstring":"/**\n     * Delete all expired items\n     *\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func OnEvicted ( fn : ( String , T ) -> Unit ) {  synchronized ( this . mu ) {  this . onEvicted = fn NL } NL }","func_name":"OnEvicted","docstring":"/**\n     * Set a callback. When deleting a key, it will call the set method for notification\n     *\n     * @param fn Callback\n     *\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func Items ( ) : HashMap < String , Item < T > > {   let m = HashMap < String , Item < T > > ( this . items . size ) NL  let now = Time . now ( ) . unixNano ( ) NL synchronized ( this . mu ) {  for ( ( key , item ) in this . items ) {  if ( item . Expiration > 0 ) {  if ( now > item . Expiration ) {  continue NL } NL } NL m . put ( key , item ) NL } NL } NL return m NL }","func_name":"Items","docstring":"/**\n     * Get all cached items\n     *\n     * @return HashMap<String, Item<T>> cached items\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func ItemCount ( ) : Int64 {   var n : Int64 NL synchronized ( this . mu ) {  n = this . items . size NL } NL return n NL }","func_name":"ItemCount","docstring":"/**\n     * Get the number of cached items\n     *\n     * @return Int64 Number\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func Flush ( ) {  synchronized ( this . mu ) {  this . items . clear ( ) NL } NL }","func_name":"Flush","docstring":"/**\n     * Clear all cached items\n     *\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func Save ( w : OutputStream ) {  synchronized ( this . mu ) {   let m : DataModel = this . items . serialize ( ) NL w . write ( m . toJson ( ) . toString ( ) . toUtf8Array ( ) ) NL w . flush ( ) NL } NL }","func_name":"Save","docstring":"/**\n     * Write cache to writestream\n     *\n     * @param w Writestream\n     *\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func SaveFile ( filename : String ) {  try (  let fs = File ( filename , Open ( true , true ) ) ) {  this . Save ( fs ) NL fs . close ( ) NL } NL }","func_name":"SaveFile","docstring":"/**\n     * Write cache to file\n     *\n     * @param filename File name\n     *\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func Load ( r : InputStream ) {   let b = ArrayList < UInt8 > ( ) NL while ( true ) {   let bs = Array < UInt8 > ( 512 , item : 0 ) NL  let n = r . read ( bs ) NL b . appendAll ( bs [ 0 .. n ] ) NL if ( n == 0 || n < 512 ) {  break NL } NL } NL  let json = String . fromUtf8 ( Array < UInt8 > ( b ) ) NL  let itemm = HashMap < String , Item < T > > . deserialize ( DataModel . fromJson ( JsonValue . fromStr ( json ) ) ) NL this . items = items NL synchronized ( this . mu ) {  for ( ( k , v ) in itemm ) {  if ( ! this . items . contains ( k ) ) {  this . items [ k ] = v NL } NL } NL } NL }","func_name":"Load","docstring":"/**\n     * Read cache from readstream\n     *\n     * @param r ReadStream\n     *\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"public func Loadfile ( filename : String ) {   var fs = File ( filename , Open ( true , true ) ) NL this . Load ( fs ) NL fs . flush ( ) NL fs . close ( ) NL }","func_name":"Loadfile","docstring":"/**\n     * Read cache from file\n     *\n     * @param filename File name\n     *\n     * @since 0.28.4\n     */"}
{"repo":"cj-cache","file":"cache.cj","path":"cj-cache/src/cache/cache.cj","code_tokens":"func run ( c : Cache < T > ) {   var ticker = Ticker ( this . Interval , { =>  let count = c . ItemCount ( ) NL c . DeleteExpired ( ) NL  let currCount = c . ItemCount ( ) NL println ( clean expired items, count: ${count} => ${currCount} ) NL } ) NL }","func_name":"run","docstring":""}
