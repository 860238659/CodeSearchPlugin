{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func toString ( ) : String","func_name":"toString","docstring":"/**\n     * Convert IniValue to String\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func toIniString ( ) : String","func_name":"toIniString","docstring":"/**\n     * Convert IniValue to IniString\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func getValue ( ) : String {  value NL }","func_name":"getValue","docstring":"/**\n     * Get value\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func toString ( ) : String {  \\\"${value}\\\" NL }","func_name":"toString","docstring":"/**\n     * Convert IniValue to String\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func toIniString ( ) : String {  \\\"${value}\\\" NL }","func_name":"toIniString","docstring":"/**\n     * Convert IniValue to IniString\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func getValue ( ) : Int32 {  value NL }","func_name":"getValue","docstring":"/**\n     * Get value\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func toString ( ) : String {  ${value} NL }","func_name":"toString","docstring":"/**\n     * Convert IniValue to String\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func toIniString ( ) : String {  ${value} NL }","func_name":"toIniString","docstring":"/**\n     * Convert IniValue to IniString\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func getValue ( ) : Int64 {  value NL }","func_name":"getValue","docstring":"/**\n     * Get value\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func toString ( ) : String {  ${value} NL }","func_name":"toString","docstring":"/**\n     * Convert IniValue to String\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func toIniString ( ) : String {  ${value} NL }","func_name":"toIniString","docstring":"/**\n     * Convert IniValue to IniString\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func getValue ( ) : Float64 {  value NL }","func_name":"getValue","docstring":"/**\n     * Get value\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func toString ( ) : String {  ${value} NL }","func_name":"toString","docstring":"/**\n     * Convert IniValue to String\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func toIniString ( ) : String {  ${value} NL }","func_name":"toIniString","docstring":"/**\n     * Convert IniValue to IniString\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func getValue ( ) : Bool {  value NL }","func_name":"getValue","docstring":"/**\n     * Get value\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func toString ( ) : String {  ${value} NL }","func_name":"toString","docstring":"/**\n     * Convert IniValue to String\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_value.cj","path":"ini/src/ini_value.cj","code_tokens":"public func toIniString ( ) : String {  ${value} NL }","func_name":"toIniString","docstring":"/**\n     * Convert IniValue to IniString\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"public func toString ( ) : String {  ${key}=${value.toString()} NL }","func_name":"toString","docstring":"/**\n     * Convert IniField to string format\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"public func toString ( ) : String {   var str : String = [${sectionName}]\\r\\n NL for ( fieldItem in fields ) {  str = str + ${fieldItem[0]}=${fieldItem[1].toString()}\\r\\n NL } NL return str NL }","func_name":"toString","docstring":"/**\n     * Convert IniField to string format\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"public func get ( key : String ) : IniValue {   let val = fields . get ( key ) NL match ( val ) { case Some ( v ) => v NL case None => throw IniException ( \\\"${key}\\\" is None IniValue type ) NL } NL }","func_name":"get","docstring":"/**\n     * get IniSection value\n     *\n     * @param key the key of fields\n     *\n     * @return The return type of IniValue\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"public func toString ( ) : String {   var str = File: ${iniName}\\r\\n NL for ( section in sections ) {  str = str + [${section[0]}]\\r\\n NL for ( fieldItem in section [ 1 ] . fields ) {  str = str + ${fieldItem[0]}=${fieldItem[1].toString()}\\r\\n NL } NL } NL return str NL }","func_name":"toString","docstring":"/**\n     * Convert IniField to string format\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"public func get ( key : String ) : IniSection {   let section = sections . get ( key ) NL match ( section ) { case Some ( v ) => v NL case None => throw IniException ( \\\"${key}\\\" is None IniSection type ) NL } NL }","func_name":"get","docstring":"/**\n     * get IniSection value\n     *\n     * @param key the key of fields\n     *\n     * @return The return type of IniValue\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"public func getMessage ( ) : String {  return messages NL }","func_name":"getMessage","docstring":""}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"public override func toString ( ) : String {  return IniException: ${messages} NL }","func_name":"toString","docstring":"/**\n     * Convert IniField to string format\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func isComment ( line : String ) : Bool {  if ( line . size > 0 && line [ 0 ] == # ) {  true NL } else {  false NL } NL }","func_name":"isComment","docstring":"/*\n     * Judge whether it is Comment\n     *\n     * @param line Line of String\n     *\n     * @return The return type of Bool\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func isSection ( line : String ) : Bool {  if ( line . size > 0 && line [ 0 ] == [ ) {  true NL } else {  false NL } NL }","func_name":"isSection","docstring":"/*\n     * Judge whether it is Section\n     *\n     * @param line Line of String\n     *\n     * @return The return type of Bool\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func isAlphabet ( ch : Char ) : Bool {  if ( ch > = a && ch <= z ) {  true NL } else if ( ch > = A && ch <= Z ) {  true NL } else {  false NL } NL }","func_name":"isAlphabet","docstring":"/*\n     * Judge whether it is Alphabet\n     *\n     * @param ch Type is Char\n     *\n     * @return The return type of Bool\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func isNumber ( ch : Char ) : Bool {  if ( ch > = 0 && ch <= 9 ) {  true NL } else {  false NL } NL }","func_name":"isNumber","docstring":"/*\n     * Judge whether it is Number\n     *\n     * @param ch Type is Char\n     *\n     * @return The return type of Bool\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func isBoolean ( line : String ) : Bool {   let str : String = toLowerCase ( line ) NL  let size : Int64 = str . size NL if ( size != String ( true ) . size && size != String ( false ) . size ) {  false NL } else if ( str == true || str == false ) {  true NL } else {  false NL } NL }","func_name":"isBoolean","docstring":"/*\n     * Judge whether it is Boolean\n     *\n     * @param line Type is String\n     *\n     * @return The return type of Bool\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func isInt32 ( line : String ) : Bool {   let max : String = ${Int32.Max} NL  let min : String = ${Int32.Min} NL  var negInt32Flag = false NL if ( line [ 0 ] == - ) {  negInt32Flag = true NL } NL if ( negInt32Flag && line . size < min . size ) {  return true NL } else if ( negInt32Flag && line . size > min . size ) {  return false NL } else if ( ! negInt32Flag && line . size < max . size ) {  return true NL } else if ( ! negInt32Flag && line . size > max . size ) {  return false NL } NL for ( i in 0 .. line . size ) {  if ( negInt32Flag && line [ i ] > min [ i ] ) {  return false NL } NL if ( ! negInt32Flag && line [ i ] > max [ i ] ) {  return false NL } NL } NL return true NL }","func_name":"isInt32","docstring":"/*\n     * Judge whether it is Int32\n     *\n     * @param line Type is String\n     *\n     * @return The return type of Bool\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func isInt64 ( line : String ) : Bool {   let max : String = ${Int64.Max} NL  let min : String = ${Int64.Min} NL  var negInt64Flag = false NL if ( line [ 0 ] == - ) {  negInt64Flag = true NL } NL if ( negInt64Flag && line . size < min . size ) {  return true NL } else if ( negInt64Flag && line . size > min . size ) {  return false NL } else if ( ! negInt64Flag && line . size < max . size ) {  return true NL } else if ( ! negInt64Flag && line . size > max . size ) {  return false NL } NL for ( i in 0 .. line . size ) {  if ( negInt64Flag && line [ i ] > min [ i ] ) {  return false NL } else if ( negInt64Flag && line [ i ] < min [ i ] ) {  return true NL } NL if ( ! negInt64Flag && line [ i ] > max [ i ] ) {  return false NL } else if ( ! negInt64Flag && line [ i ] < max [ i ] ) {  return true NL } NL } NL return true NL }","func_name":"isInt64","docstring":"/*\n     * Judge whether it is Int64\n     *\n     * @param line Type is String\n     *\n     * @return The return type of Bool\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func isField ( line : String ) : Bool {  if ( line . size > 0 && ! line . contains ( = ) ) {  throw IniException ( Incorrect ini format ) NL } NL if ( line . size > 0 && isAlphabet ( line [ 0 ] ) ) {  true NL } else {  false NL } NL }","func_name":"isField","docstring":"/*\n     * Judge whether it is Field\n     *\n     * @param line Type is String\n     *\n     * @return The return type of Bool\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func delPrepositionChar ( line : String , ch : Char ) : String {   let chars : ArrayList < Char > = ArrayList < Char > ( ) NL  let size : Int64 = line . size NL  var flag : Bool = false NL for ( i in 0 .. size ) {  if ( line [ i ] != ch ) {  flag = true NL } NL if ( flag ) {  chars . append ( line [ i ] ) NL } NL } NL return String ( chars ) NL }","func_name":"delPrepositionChar","docstring":"/*\n     * Delete non specified characters\n     *\n     * @param line Type is String\n     * @param ch Type is Char\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func delHeadAndTailChar ( line : String , ch : Char ) : String {   var chars : ArrayList < Char > = ArrayList < Char > ( ) NL  var size : Int64 = line . size NL  var flag : Bool = false NL  var str : String = delPrepositionChar ( line , ch ) NL str = str . reverse ( ) NL str = delPrepositionChar ( str , ch ) NL return str . reverse ( ) NL }","func_name":"delHeadAndTailChar","docstring":"/*\n     * Delete head and tail characters\n     *\n     * @param line Type is String\n     * @param ch Type is Char\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func delHeadAndTailSpace ( line : String ) : String {  return delHeadAndTailChar ( line ,   ) NL }","func_name":"delHeadAndTailSpace","docstring":""}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func delHeadAndTailQuotation ( line : String ) : String {   let str : String = delHeadAndTailChar ( line , \\\" ) NL return delHeadAndTailChar ( str , ' ) NL }","func_name":"delHeadAndTailQuotation","docstring":""}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func combineMultiLines ( str : String ) : String {   let chars : ArrayList < Char > = ArrayList < Char > ( ) NL  let size : Int64 = str . size NL  var multiFlag : Bool = false NL for ( i in 0 .. size ) {  if ( str [ i ] == \\\\ ) {  multiFlag = true NL } NL if ( multiFlag && str [ i - 1 ] == \\n ) {  multiFlag = false NL } NL if ( ! multiFlag ) {  chars . append ( str [ i ] ) NL } NL } NL String ( chars ) NL }","func_name":"combineMultiLines","docstring":""}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func toLowerCase ( line : String ) : String {   let chars : ArrayList < Char > = ArrayList < Char > ( ) NL  let size : Int64 = line . size NL for ( i in 0 .. size ) {  if ( line [ i ] > = A && line [ i ] <= Z ) {   let ch : Char = line [ i ] . toAsciiLowerCase ( ) NL chars . append ( ch ) NL } else {  chars . append ( line [ i ] ) NL } NL } NL return String ( chars ) NL }","func_name":"toLowerCase","docstring":""}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func parserSection ( line : String ) : String {   var chars : ArrayList < Char > = ArrayList < Char > ( ) NL  let size : Int64 = line . size NL for ( i in 0 .. size ) {  if ( line [ i ] != [ && line [ i ] != ] ) {  chars . append ( line [ i ] ) NL } NL } NL return delHeadAndTailSpace ( String ( chars ) ) NL }","func_name":"parserSection","docstring":""}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func parserField ( line : String ) : ( String , String ) {   var chars : ArrayList < Char > = ArrayList < Char > ( ) NL  let size : Int64 = line . size NL  var flag : Bool = false NL for ( i in 0 .. size ) {  if ( line [ i ] == ; || line [ i ] == # ) {  flag = true NL } NL if ( ! flag ) {  chars . append ( line [ i ] ) NL } NL } NL  let lineWithOutComment : String = String ( chars ) NL  let lines : Array < String > = lineWithOutComment . split ( = ) NL  let left : String = delHeadAndTailSpace ( lines [ 0 ] ) NL  let right : String = delHeadAndTailSpace ( lines [ 1 ] ) NL return ( left , right ) NL }","func_name":"parserField","docstring":""}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func parseIniType ( line : String ) : IniValue {   let chars : ArrayList < Char > = ArrayList < Char > ( ) NL  let size : Int64 = line . size NL  var numberCount : Int64 = 0 NL  var dotCount : Int64 = 0 NL  var alphabetCount : Int64 = 0 NL  var elseCharCount : Int64 = 0 NL  var negCharCount : Int64 = 0 NL for ( i in 0 .. size ) {  if ( isAlphabet ( line [ i ] ) ) {  alphabetCount ++ NL } else if ( isNumber ( line [ i ] ) ) {  numberCount ++ NL } else if ( line [ i ] == . ) {  dotCount ++ NL } else if ( line [ i ] == - ) {  negCharCount ++ NL } else {  elseCharCount ++ NL } NL } NL return isIniValueType ( line , alphabetCount , numberCount , elseCharCount , dotCount , negCharCount ) NL }","func_name":"parseIniType","docstring":""}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func isIniValueType ( line : String , alphabetCount : Int64 , numberCount : Int64 , elseCharCount : Int64 , dotCount : Int64 , negCharCount : Int64 ) : IniValue {  if ( alphabetCount == 0 && numberCount > 0 && elseCharCount == 0 && dotCount == 0 && negCharCount <= 1 ) {  return isIntType ( line ) NL } else if ( alphabetCount == 0 && numberCount > 0 && elseCharCount == 0 && dotCount == 1 && negCharCount <= 1 ) {  return isFloatType ( line ) NL } else {  return isBoolType ( line ) NL } NL }","func_name":"isIniValueType","docstring":""}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func isIntType ( line : String ) : IniValue {  if ( isInt32 ( line ) ) {   let data : Int32 = Int32 . parse ( line ) NL  let ret = IniInt ( data ) NL return ret NL } else if ( isInt64 ( line ) ) {   let data : Int64 = Int64 . parse ( line ) NL  let ret = IniLongInt ( data ) NL return ret NL } else {  throw IniException ( ini longint overflow ) NL } NL }","func_name":"isIntType","docstring":""}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func isFloatType ( line : String ) : IniValue {   let data : Float64 = Float64 . parse ( line ) NL  let ret : IniDouble = IniDouble ( data ) NL return ret NL }","func_name":"isFloatType","docstring":""}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"private func isBoolType ( line : String ) : IniValue {  if ( isBoolean ( line ) ) {   let str : String = toLowerCase ( line ) NL  let data : Bool = Bool . parse ( str ) NL  let ret : IniBoolean = IniBoolean ( data ) NL return ret NL } else {   let ret = IniString ( delHeadAndTailChar ( line , \\\" ) ) NL return ret NL } NL }","func_name":"isBoolType","docstring":""}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"public func parse ( ) : IniFile {   var section : IniSection = IniSection (  ) NL for ( line in lines ) {  if ( isComment ( line ) ) {  ( ) NL } else if ( isSection ( line ) ) {   let sectionName : String = parserSection ( line ) NL section = IniSection ( sectionName ) NL ini . sections . put ( sectionName , section ) NL ( ) NL } else if ( isField ( line ) ) {   let field : ( String , String ) = parserField ( line ) NL section . fields . put ( field [ 0 ] , parseIniType ( field [ 1 ] ) ) NL ( ) NL } NL } NL return ini NL }","func_name":"parse","docstring":"/**\n     * ini file parse\n     * ini -> section -> filed -> left value/right value\n     *\n     * @return The return type of IniFile\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"public func getString ( val : IniValue ) : String {   let a : Option < IniString > = val as IniString NL  let aval : IniString = match ( a ) { case Some ( v ) => v NL case None => throw IniException ( None IniString type ) NL } NL return aval . getValue ( ) NL }","func_name":"getString","docstring":"/**\n     * The Function is getString\n     *\n     * @param val The param is value of IniValue\n     *\n     * @return The return type of String\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"public func getInt ( val : IniValue ) : Int32 {   let a : Option < IniInt > = val as IniInt NL  let aval : IniInt = match ( a ) { case Some ( v ) => v NL case None => throw IniException ( None IniInt type ) NL } NL return aval . getValue ( ) NL }","func_name":"getInt","docstring":"/**\n     * The Function is getInt\n     *\n     * @param val The param is value of IniValue\n     *\n     * @return The return type of Int32\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"public func getLongInt ( val : IniValue ) : Int64 {   let a : Option < IniLongInt > = val as IniLongInt NL  let aval : IniLongInt = match ( a ) { case Some ( v ) => v NL case None => throw IniException ( None IniLongInt type ) NL } NL return aval . getValue ( ) NL }","func_name":"getLongInt","docstring":"/**\n     * The Function is getLongInt\n     *\n     * @param val The param is value of IniValue\n     *\n     * @return The return type of Int64\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"public func getDouble ( val : IniValue ) : Float64 {   let a : Option < IniDouble > = val as IniDouble NL  let aval : IniDouble = match ( a ) { case Some ( v ) => v NL case None => throw IniException ( None IniDouble type ) NL } NL return aval . getValue ( ) NL }","func_name":"getDouble","docstring":"/**\n     * The Function is getDouble\n     *\n     * @param val The param is value of IniValue\n     *\n     * @return The return type of Float64\n     * @since\n     */"}
{"repo":"ini","file":"ini_parser.cj","path":"ini/src/ini_parser.cj","code_tokens":"public func getBoolean ( val : IniValue ) : Bool {   let a : Option < IniBoolean > = val as IniBoolean NL  let aval : IniBoolean = match ( a ) { case Some ( v ) => v NL case None => throw IniException ( None IniBoolean type ) NL } NL return aval . getValue ( ) NL }","func_name":"getBoolean","docstring":"/**\n     * The Function is getBoolean\n     *\n     * @param val The param is val of IniValue\n     *\n     * @return The return type of Bool\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_data_model.cj","path":"ini/src/ini_data_model.cj","code_tokens":"func toIni ( ) : IniValue","func_name":"toIni","docstring":"/**\n     * Convert ToIni to IniValue\n     *\n     * @return The return type of DataModel\n     * @since 0.28.4\n     */"}
{"repo":"ini","file":"ini_data_model.cj","path":"ini/src/ini_data_model.cj","code_tokens":"static func fromIni ( iv : IniValue ) : DataModel","func_name":"fromIni","docstring":"/**\n     * Convert IniValue to DataModel\n     *\n     * @param IniValue The param is iv of IniValue\n     *\n     * @return The return type of DataModel\n     * @since 0.28.4\n     */"}
