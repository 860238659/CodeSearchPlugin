{"repo":"eventbus","file":"eventBus.cj","path":"eventbus/src/eventBus.cj","code_tokens":"public func publish ( eventID : Int64 , args : T ) : Unit {   let fn = eventArray . get ( eventID ) . getOrThrow ( ) NL fn ( args ) NL if ( flagOnceBool ) {  if ( flagOnce . contains ( NameArray [ eventID ] ) ) {  this . eventArray . remove ( eventID ) NL this . NameArray . remove ( eventID ) NL } NL } NL }","func_name":"publish","docstring":"/*\n     * The Function is publish events\n     *\n     * @param eventName of Event name\n     * @param args of Event content\n     *\n     * @since 0.29.3\n     */"}
{"repo":"eventbus","file":"eventBus.cj","path":"eventbus/src/eventBus.cj","code_tokens":"public func subscribe ( eventName : String , callback : ( T ) -> Unit ) : Int64 {  if ( flagOnce . contains ( eventName ) ) {  throw IllegalArgumentException ( eventName is one-time subscription  ) NL } NL NameArray . append ( eventName ) NL this . eventArray . append ( callback ) NL eventId ++ NL return eventId - 1 NL }","func_name":"subscribe","docstring":"/*\n     * The Function is subscribe to events\n     *\n     * @param eventName of Event name\n     * @param callback of Event callbacks\n     *\n     * @since 0.29.3\n     */"}
{"repo":"eventbus","file":"eventBus.cj","path":"eventbus/src/eventBus.cj","code_tokens":"public func unSubscribe ( eventID : Int64 ) : Unit {  this . eventArray . remove ( eventID ) NL this . NameArray . remove ( eventID ) NL }","func_name":"unSubscribe","docstring":"/*\n     * The Function is unsubscribe from events\n     *\n     * @param eventName of Event name\n     * @param id of the unsubscribed event\n     *\n     * @since 0.29.3\n     */"}
{"repo":"eventbus","file":"eventBus.cj","path":"eventbus/src/eventBus.cj","code_tokens":"public func subscribeOnce ( eventName : String , callback : ( T ) -> Unit ) : Int64 {  flagOnceBool = true NL this . flagOnce . append ( eventName ) NL NameArray . append ( eventName ) NL this . eventArray . append ( callback ) NL eventId ++ NL return eventId - 1 NL }","func_name":"subscribeOnce","docstring":"/*\n     * The Function is subscribe only once\n     *\n     * @param eventName of Event name\n     * @param callback of Event callbacks\n     *\n     * @since 0.29.3\n     */"}
{"repo":"eventbus","file":"eventBus.cj","path":"eventbus/src/eventBus.cj","code_tokens":"public func clear ( eventName : String , eventID : Int64 ) : Unit {  if ( ! this . NameArray . contains ( eventName ) ) {  this . NameArray . clear ( ) NL this . eventArray . clear ( ) NL return NL } NL this . NameArray . remove ( eventID ) NL this . eventArray . remove ( eventID ) NL }","func_name":"clear","docstring":"/*\n     * The Function is clear\n     *\n     * @param eventName of Event name\n     *\n     * @since 0.29.3\n     */"}
{"repo":"eventbus","file":"eventBus.cj","path":"eventbus/src/eventBus.cj","code_tokens":"public func subscribeAsync ( eventName : String , callback : ( T ) -> Unit ) : Int64 {   let fut : Future < Unit > = spawn { subscribe ( eventName , callback ) NL return NL } NL waitSync . append ( fut ) NL return eventId NL }","func_name":"subscribeAsync","docstring":"/**\n     * The Function is subscribeAsync\n     *\n     * @param eventName of String\n     * @param callback of (T)->Unit\n     *\n     * @return Type of Unit\n     * @since 0.34.3\n     */"}
{"repo":"eventbus","file":"eventBus.cj","path":"eventbus/src/eventBus.cj","code_tokens":"public func subscribeOnceAsync ( eventName : String , callback : ( T ) -> Unit ) : Int64 {   let fut : Future < Unit > = spawn { subscribeOnce ( eventName , callback ) NL return NL } NL waitSync . append ( fut ) NL return eventId NL }","func_name":"subscribeOnceAsync","docstring":"/**\n     * The Function is subscribeOnceAsync\n     *\n     * @param eventName of String\n     * @param callback of (T)->Unit\n     *\n     * @return Type of Unit\n     * @since 0.34.3\n     */"}
{"repo":"eventbus","file":"eventBus.cj","path":"eventbus/src/eventBus.cj","code_tokens":"public func waitSyncs ( ) {  for ( f in waitSync ) {  f . getResult ( ) NL } NL waitSync . clear ( ) NL }","func_name":"waitSyncs","docstring":"/**\n     * The Function is waitSync\n     *\n     * @since 0.34.3\n     */"}
